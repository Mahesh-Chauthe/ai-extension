apiVersion: v1
kind: ConfigMap
metadata:
  name: org-portal-config
  namespace: enterprise-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Organization Portal - Enterprise Security</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; background: #0f172a; color: white; }
            .login { min-height: 100vh; display: flex; align-items: center; justify-content: center; }
            .login-card { background: #1e293b; padding: 3rem; border-radius: 12px; max-width: 400px; }
            .dashboard { display: none; max-width: 1400px; margin: 0 auto; padding: 2rem; }
            .header { background: linear-gradient(135deg, #059669, #10b981); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; }
            .nav { display: flex; gap: 1rem; margin-top: 1rem; }
            .nav-item { background: rgba(255,255,255,0.1); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; transition: all 0.2s; }
            .nav-item:hover, .nav-item.active { background: rgba(255,255,255,0.2); }
            .card { background: #1e293b; padding: 2rem; border-radius: 12px; margin-bottom: 1rem; border: 1px solid #334155; }
            .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; margin-bottom: 2rem; }
            .btn { background: #059669; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; }
            .btn:hover { background: #047857; }
            .btn-danger { background: #dc2626; }
            .btn-success { background: #10b981; }
            .form-group { margin-bottom: 1rem; }
            .form-group label { display: block; margin-bottom: 0.5rem; font-weight: 600; }
            .form-group input, .form-group select { width: 100%; padding: 0.75rem; border: 1px solid #475569; border-radius: 8px; background: #334155; color: white; }
            .table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
            .table th, .table td { padding: 1rem; text-align: left; border-bottom: 1px solid #334155; }
            .table th { background: #334155; }
            .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 1000; }
            .modal-content { background: #1e293b; padding: 2rem; border-radius: 12px; max-width: 500px; margin: 10% auto; }
            .section { display: none; }
            .section.active { display: block; }
            .stat-number { font-size: 2rem; font-weight: bold; color: #10b981; }
            .stat-label { color: #94a3b8; margin-top: 0.5rem; }
            .status { padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.8rem; font-weight: 600; }
            .status.active { background: #10b981; color: white; }
            .status.inactive { background: #6b7280; color: white; }
        </style>
    </head>
    <body>
        <div id="loginScreen" class="login">
            <div class="login-card">
                <h1>üè¢ Organization Portal</h1>
                <p>Enter your organization access token</p>
                <form id="loginForm">
                    <div class="form-group">
                        <input type="text" id="token" placeholder="Access Token (ext_...)" required>
                    </div>
                    <button type="submit" class="btn" style="width: 100%;">Login to Dashboard</button>
                </form>
                <div style="margin-top: 2rem; color: #64748b; font-size: 0.9rem;">
                    <p><strong>Sample Token:</strong> ext_techcorp123456789</p>
                </div>
            </div>
        </div>

        <div id="dashboard" class="dashboard">
            <div class="header">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h1 id="orgName">Organization Dashboard</h1>
                        <p id="orgInfo">Manage users and extension tokens</p>
                    </div>
                    <button onclick="logout()" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white; padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer;">Logout</button>
                </div>
                <div class="nav">
                    <div class="nav-item active" onclick="showSection('overview')">Overview</div>
                    <div class="nav-item" onclick="showSection('users')">User Management</div>
                    <div class="nav-item" onclick="showSection('extensions')">Extension Management</div>
                    <div class="nav-item" onclick="showSection('activity')">Activity Logs</div>
                </div>
            </div>
            
            <!-- Overview Section -->
            <div id="overview" class="section active">
                <div class="grid">
                    <div class="card">
                        <h3>Users</h3>
                        <div class="stat-number" id="userCount">0</div>
                        <div class="stat-label">Active users in organization</div>
                    </div>
                    <div class="card">
                        <h3>Extension Tokens</h3>
                        <div class="stat-number" id="tokenCount">0</div>
                        <div class="stat-label">Active extension tokens</div>
                    </div>
                    <div class="card">
                        <h3>User Limit</h3>
                        <div class="stat-number" id="userLimit">50</div>
                        <div class="stat-label">Maximum users allowed</div>
                    </div>
                    <div class="card">
                        <h3>Extension Status</h3>
                        <div class="stat-number" style="color: #10b981;">Active</div>
                        <div class="stat-label">Browser extension deployment</div>
                    </div>
                </div>
                
                <div class="card">
                    <h3>Organization Details</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem;">
                        <div>
                            <p><strong>Organization:</strong> <span id="orgNameDetail">-</span></p>
                            <p><strong>Domain:</strong> <span id="orgDomain">-</span></p>
                            <p><strong>Admin Email:</strong> <span id="orgAdminEmail">-</span></p>
                        </div>
                        <div>
                            <p><strong>Access Token:</strong></p>
                            <code id="orgToken" style="background: #334155; padding: 0.5rem; border-radius: 4px; display: block; margin-top: 0.5rem;">-</code>
                            <p style="margin-top: 1rem; color: #64748b; font-size: 0.9rem;">Provide this token to users for extension setup</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User Management Section -->
            <div id="users" class="section">
                <div style="display: flex; justify-content: space-between; margin-bottom: 2rem;">
                    <h2>User Management</h2>
                    <button class="btn btn-success" onclick="showUserModal()">+ Create User</button>
                </div>
                <div class="card">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>User</th>
                                <th>Email</th>
                                <th>Extension Token</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="userList"></tbody>
                    </table>
                </div>
            </div>

            <!-- Extension Management Section -->
            <div id="extensions" class="section">
                <h2>Extension Management</h2>
                <div class="grid">
                    <div class="card">
                        <h3>Extension Status</h3>
                        <div class="stat-number" style="color: #10b981;">Active</div>
                        <div class="stat-label">Current deployment status</div>
                        <button class="btn" onclick="downloadExtension()" style="margin-top: 1rem;">Download Extension</button>
                    </div>
                    <div class="card">
                        <h3>Version Info</h3>
                        <div class="stat-number" id="extensionVersion">v1.0.0</div>
                        <div class="stat-label">Current version</div>
                    </div>
                </div>
                
                <div class="card">
                    <h3>Extension Setup Instructions</h3>
                    <div style="background: #334155; padding: 1.5rem; border-radius: 8px; margin-top: 1rem;">
                        <h4>For End Users:</h4>
                        <ol style="margin-left: 1.5rem; line-height: 1.6;">
                            <li>Download the browser extension from the link above</li>
                            <li>Install the extension in Chrome/Edge browser</li>
                            <li>Click the extension icon in the toolbar</li>
                            <li>Enter the Extension Token provided by admin</li>
                            <li>Extension will activate and start monitoring</li>
                        </ol>
                        <p style="margin-top: 1rem; color: #94a3b8; font-size: 0.9rem;">
                            <strong>Note:</strong> Each user needs a unique Extension Token. Generate tokens in User Management section.
                        </p>
                    </div>
                </div>
            </div>

            <!-- Activity Logs Section -->
            <div id="activity" class="section">
                <h2>Activity Logs</h2>
                <div class="card">
                    <div style="display: flex; justify-content: between; margin-bottom: 1rem;">
                        <h3>Recent Activity</h3>
                        <button class="btn" onclick="loadActivity()">Refresh</button>
                    </div>
                    <div id="activityList" style="max-height: 400px; overflow-y: auto;"></div>
                </div>
            </div>
        </div>

        <!-- Create User Modal -->
        <div id="userModal" class="modal">
            <div class="modal-content">
                <h3>Create User & Extension Token</h3>
                <form id="userForm">
                    <div class="form-group">
                        <label>User Name</label>
                        <input type="text" id="userName" required>
                    </div>
                    <div class="form-group">
                        <label>Email Address</label>
                        <input type="email" id="userEmail" required>
                    </div>
                    <div class="form-group">
                        <label>Role</label>
                        <select id="userRole">
                            <option value="user">End User</option>
                            <option value="manager">Manager</option>
                        </select>
                    </div>
                    <div style="display: flex; gap: 1rem; margin-top: 2rem;">
                        <button type="submit" class="btn btn-success">Create User</button>
                        <button type="button" class="btn" onclick="closeUserModal()">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <script>
            const API_BASE = window.location.origin.replace(/:\d+/, ':8080');
            let currentOrg = null;
            let users = [];
            
            document.getElementById('loginForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const token = document.getElementById('token').value.trim();
                
                try {
                    const response = await fetch(`${API_BASE}/api/org/${token}`);
                    if (response.ok) {
                        currentOrg = await response.json();
                        showDashboard();
                        loadUsers();
                    } else {
                        alert('Invalid access token. Please check the token from Master Admin.');
                    }
                } catch (error) {
                    alert('Connection error. Please check API connectivity.');
                }
            });
            
            function showDashboard() {
                document.getElementById('loginScreen').style.display = 'none';
                document.getElementById('dashboard').style.display = 'block';
                
                // Update organization info
                document.getElementById('orgName').textContent = currentOrg.name;
                document.getElementById('orgInfo').textContent = `Admin: ${currentOrg.adminEmail} | Users: ${currentOrg.users?.length || 0}/${currentOrg.userLimit}`;
                document.getElementById('orgNameDetail').textContent = currentOrg.name;
                document.getElementById('orgDomain').textContent = currentOrg.domain;
                document.getElementById('orgAdminEmail').textContent = currentOrg.adminEmail;
                document.getElementById('orgToken').textContent = currentOrg.accessToken;
                document.getElementById('userLimit').textContent = currentOrg.userLimit;
            }
            
            function showSection(sectionId) {
                document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
                document.querySelectorAll('.nav-item').forEach(n => n.classList.remove('active'));
                document.getElementById(sectionId).classList.add('active');
                event.target.classList.add('active');
                
                if (sectionId === 'users') loadUsers();
                if (sectionId === 'activity') loadActivity();
            }
            
            function logout() {
                currentOrg = null;
                users = [];
                document.getElementById('loginScreen').style.display = 'flex';
                document.getElementById('dashboard').style.display = 'none';
                document.getElementById('token').value = '';
                document.getElementById('userList').innerHTML = '';
            }
            
            function showUserModal() { 
                document.getElementById('userModal').style.display = 'block'; 
            }
            
            function closeUserModal() { 
                document.getElementById('userModal').style.display = 'none'; 
            }
            
            async function loadUsers() {
                try {
                    const response = await fetch(`${API_BASE}/api/users/org/${currentOrg.accessToken}`);
                    users = await response.json();
                    
                    const tbody = document.getElementById('userList');
                    tbody.innerHTML = '';
                    
                    users.forEach(user => {
                        const row = tbody.insertRow();
                        row.innerHTML = `
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td><code style="font-size: 0.8rem;">${user.extensionToken}</code></td>
                            <td><span class="status ${user.status}">${user.status}</span></td>
                            <td>${new Date(user.createdAt || Date.now()).toLocaleDateString()}</td>
                            <td>
                                <button class="btn" onclick="regenerateToken('${user.id}')" style="margin-right: 0.5rem;">Regenerate Token</button>
                                <button class="btn" onclick="editUser('${user.id}')" style="margin-right: 0.5rem;">Edit</button>
                                <button class="btn btn-danger" onclick="deleteUser('${user.id}')">Delete</button>
                            </td>
                        `;
                    });
                    
                    // Update stats
                    document.getElementById('userCount').textContent = users.length;
                    document.getElementById('tokenCount').textContent = users.length;
                } catch (error) {
                    console.error('Error loading users:', error);
                }
            }
            
            document.getElementById('userForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const userData = {
                    name: document.getElementById('userName').value,
                    email: document.getElementById('userEmail').value,
                    role: document.getElementById('userRole').value,
                    orgToken: currentOrg.accessToken
                };
                
                try {
                    const response = await fetch(`${API_BASE}/api/users`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(userData)
                    });
                    
                    const user = await response.json();
                    
                    alert(`User Created Successfully!

Name: ${user.name}
Email: ${user.email}
Extension Token: ${user.extensionToken}

Provide the Extension Token to the user for browser extension setup.

Instructions for user:
1. Download and install the browser extension
2. Click extension icon and enter token: ${user.extensionToken}
3. Extension will activate and start monitoring`);
                    
                    closeUserModal();
                    document.getElementById('userForm').reset();
                    loadUsers();
                } catch (error) {
                    alert('Error creating user');
                }
            });
            
            async function regenerateToken(userId) {
                if (confirm('Regenerate extension token? User will need to re-authenticate their extension.')) {
                    try {
                        const response = await fetch(`${API_BASE}/api/users/${userId}/regenerate-token`, {
                            method: 'POST'
                        });
                        
                        const user = await response.json();
                        alert(`New Extension Token Generated!

User: ${user.name}
New Token: ${user.extensionToken}

Provide this new token to the user. Their old token is now invalid.`);
                        
                        loadUsers();
                    } catch (error) {
                        alert('Error regenerating token');
                    }
                }
            }
            
            async function editUser(userId) {
                const user = users.find(u => u.id === userId);
                if (user) {
                    const newName = prompt('Enter new name:', user.name);
                    const newEmail = prompt('Enter new email:', user.email);
                    
                    if (newName && newEmail) {
                        try {
                            const response = await fetch(`${API_BASE}/api/users/${userId}`, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ name: newName, email: newEmail })
                            });
                            
                            if (response.ok) {
                                alert('User updated successfully');
                                loadUsers();
                            }
                        } catch (error) {
                            alert('Error updating user');
                        }
                    }
                }
            }
            
            async function deleteUser(userId) {
                if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
                    try {
                        const response = await fetch(`${API_BASE}/api/users/${userId}`, {
                            method: 'DELETE'
                        });
                        
                        if (response.ok) {
                            alert('User deleted successfully');
                            loadUsers();
                        }
                    } catch (error) {
                        alert('Error deleting user');
                    }
                }
            }
            
            async function loadActivity() {
                try {
                    const response = await fetch(`${API_BASE}/api/activity/org/${currentOrg.accessToken}`);
                    const activities = await response.json();
                    
                    const activityList = document.getElementById('activityList');
                    activityList.innerHTML = '';
                    
                    if (activities.length === 0) {
                        activityList.innerHTML = '<p style="color: #6b7280; text-align: center; padding: 2rem;">No activity logs found</p>';
                        return;
                    }
                    
                    activities.slice(-20).reverse().forEach(activity => {
                        const div = document.createElement('div');
                        div.style.cssText = 'padding: 1rem; border-bottom: 1px solid #334155; border-left: 3px solid #10b981; margin-bottom: 0.5rem; background: #334155;';
                        div.innerHTML = `
                            <div style="font-weight: 600; color: #10b981;">${activity.action}</div>
                            <div style="margin: 0.5rem 0; color: #e2e8f0;">${activity.details}</div>
                            <div style="font-size: 0.8rem; color: #94a3b8;">${new Date(activity.timestamp).toLocaleString()}</div>
                        `;
                        activityList.appendChild(div);
                    });
                } catch (error) {
                    console.error('Error loading activity:', error);
                    document.getElementById('activityList').innerHTML = '<p style="color: #dc2626; text-align: center; padding: 2rem;">Error loading activity logs</p>';
                }
            }
            
            function downloadExtension() {
                window.open(`${API_BASE}/api/extension/download`, '_blank');
            }
        </script>
    </body>
    </html>
apiVersion: v1
kind: Namespace
metadata:
  name: enterprise-system
---
apiVersion: v1
kind: Secret
metadata:
  name: enterprise-secrets
  namespace: enterprise-system
type: Opaque
data:
  jwt-secret: ZW50ZXJwcmlzZS1qd3Qtc2VjcmV0LWtleS0yMDI0
  db-password: cGFzc3dvcmQxMjM=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-api
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-api
  template:
    metadata:
      labels:
        app: enterprise-api
    spec:
      containers:
      - name: api
        image: node:18-alpine
        ports:
        - containerPort: 8080
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: enterprise-secrets
              key: jwt-secret
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /app/server.js << 'EOF'
          const express = require('express');
          const cors = require('cors');
          const crypto = require('crypto');
          
          const app = express();
          app.use(cors());
          app.use(express.json());
          
          // Database simulation with encrypted passwords
          const db = {
            master_admins: [
              { 
                id: 1, 
                email: 'mahesh@gmail.com', 
                password_hash: crypto.createHash('sha256').update('Aurion#2025').digest('hex'),
                role: 'master', 
                status: 'active',
                created_at: new Date().toISOString()
              }
            ],
            organizations: [],
            users: [],
            org_tokens: []
          };
          
          // Hash password function
          const hashPassword = (password) => {
            return crypto.createHash('sha256').update(password).digest('hex');
          };
          
          // Generate secure tokens
          const generateToken = (prefix = 'tok') => {
            return prefix + '_' + crypto.randomBytes(32).toString('hex');
          };
          
          // Master Admin Routes
          app.post('/api/master/login', (req, res) => {
            const { email, password } = req.body;
            const hashedPassword = hashPassword(password);
            
            const admin = db.master_admins.find(a => 
              a.email === email && 
              a.password_hash === hashedPassword && 
              a.status === 'active'
            );
            
            if (admin) {
              const token = generateToken('master');
              res.json({ 
                success: true,
                token, 
                role: 'master',
                user: { email: admin.email, role: admin.role }
              });
            } else {
              res.status(401).json({ success: false, error: 'Invalid credentials' });
            }
          });
          
          app.get('/api/master/organizations', (req, res) => {
            res.json({ success: true, data: db.organizations });
          });
          
          app.post('/api/master/organizations', (req, res) => {
            const { name, domain } = req.body;
            
            if (!name || !domain) {
              return res.status(400).json({ success: false, error: 'Name and domain required' });
            }
            
            const id = 'org_' + crypto.randomBytes(16).toString('hex');
            const accessToken = generateToken('org');
            
            const org = {
              id,
              name: name.trim(),
              domain: domain.trim(),
              accessToken,
              createdAt: new Date().toISOString(),
              status: 'active'
            };
            
            db.organizations.push(org);
            db.org_tokens.push({ token: accessToken, orgId: id });
            
            res.json({ success: true, data: org });
          });
          
          // Organization Portal Routes
          app.post('/api/org/login', (req, res) => {
            const { accessToken, email } = req.body;
            
            const tokenRecord = db.org_tokens.find(t => t.token === accessToken);
            if (!tokenRecord) {
              return res.status(401).json({ success: false, error: 'Invalid access token' });
            }
            
            const org = db.organizations.find(o => o.id === tokenRecord.orgId);
            if (!org) {
              return res.status(401).json({ success: false, error: 'Organization not found' });
            }
            
            const token = generateToken('org_session');
            res.json({ 
              success: true,
              token, 
              role: 'org_admin', 
              organization: org.name,
              orgId: org.id 
            });
          });
          
          app.get('/api/org/users', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            if (!token) {
              return res.status(401).json({ success: false, error: 'No token provided' });
            }
            
            const users = db.users.filter(u => u.orgId);
            res.json({ success: true, data: users });
          });
          
          app.post('/api/org/users', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            if (!token) {
              return res.status(401).json({ success: false, error: 'No token provided' });
            }
            
            const { name, email, role } = req.body;
            
            if (!name || !email) {
              return res.status(400).json({ success: false, error: 'Name and email required' });
            }
            
            const user = {
              id: 'user_' + crypto.randomBytes(16).toString('hex'),
              name: name.trim(),
              email: email.trim(),
              role: role || 'user',
              orgId: 'default_org',
              extensionToken: generateToken('ext'),
              createdAt: new Date().toISOString(),
              status: 'active'
            };
            
            db.users.push(user);
            res.json({ success: true, data: user });
          });
          
          app.get('/api/org/analytics', (req, res) => {
            const users = db.users.filter(u => u.status === 'active');
            res.json({
              success: true,
              data: {
                totalUsers: users.length,
                activeUsers: users.length,
                totalScans: Math.floor(Math.random() * 1000) + 100,
                threatsBlocked: Math.floor(Math.random() * 50) + 10
              }
            });
          });
          
          // Health check
          app.get('/health', (req, res) => {
            res.json({ status: 'healthy', timestamp: new Date().toISOString() });
          });
          
          const PORT = 8080;
          app.listen(PORT, () => {
            console.log(`Production API running on port ${PORT}`);
            console.log('Master Admin: mahesh@gmail.com');
            console.log('Health check: /health');
          });
          EOF
          
          cd /app && npm init -y
          npm install express cors
          node server.js
        workingDir: /app
---
apiVersion: v1
kind: Service
metadata:
  name: enterprise-api-service
  namespace: enterprise-system
spec:
  selector:
    app: enterprise-api
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master-portal
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: master-portal
  template:
    metadata:
      labels:
        app: master-portal
    spec:
      containers:
      - name: portal
        image: nginx:alpine
        ports:
        - containerPort: 80
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /usr/share/nginx/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Enterprise Master Portal</title>
              <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
              <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
          </head>
          <body class="bg-gray-50">
              <div id="app">
                  <div id="loginScreen" class="min-h-screen flex items-center justify-center">
                      <div class="bg-white p-8 rounded-lg shadow-lg w-96">
                          <div class="text-center mb-6">
                              <i class="fas fa-shield-alt text-4xl text-blue-600 mb-4"></i>
                              <h1 class="text-2xl font-bold text-gray-800">Master Portal</h1>
                              <p class="text-gray-600">Enterprise Security System</p>
                          </div>
                          <form id="loginForm">
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                                  <input type="email" id="email" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" value="mahesh@gmail.com">
                              </div>
                              <div class="mb-6">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Password</label>
                                  <input type="password" id="password" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" value="Aurion#2025">
                              </div>
                              <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700">
                                  <i class="fas fa-sign-in-alt mr-2"></i>Login
                              </button>
                          </form>
                      </div>
                  </div>
          
                  <div id="dashboard" class="hidden">
                      <nav class="bg-blue-600 text-white p-4">
                          <div class="flex justify-between items-center">
                              <h1 class="text-xl font-bold"><i class="fas fa-shield-alt mr-2"></i>Enterprise Master Portal</h1>
                              <button id="logoutBtn" class="bg-blue-700 px-4 py-2 rounded hover:bg-blue-800">
                                  <i class="fas fa-sign-out-alt mr-2"></i>Logout
                              </button>
                          </div>
                      </nav>
          
                      <div class="container mx-auto p-6">
                          <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-building text-3xl text-blue-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Organizations</h3>
                                          <p id="orgCount" class="text-2xl font-bold text-blue-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-users text-3xl text-green-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Total Users</h3>
                                          <p class="text-2xl font-bold text-green-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-shield-alt text-3xl text-red-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Active Extensions</h3>
                                          <p class="text-2xl font-bold text-red-600">0</p>
                                      </div>
                                  </div>
                              </div>
                          </div>
          
                          <div class="bg-white rounded-lg shadow">
                              <div class="p-6 border-b">
                                  <div class="flex justify-between items-center">
                                      <h2 class="text-xl font-semibold">Organizations</h2>
                                      <button id="addOrgBtn" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                                          <i class="fas fa-plus mr-2"></i>Add Organization
                                      </button>
                                  </div>
                              </div>
                              <div class="p-6">
                                  <div id="organizationsList" class="space-y-4"></div>
                              </div>
                          </div>
                      </div>
                  </div>
          
                  <div id="addOrgModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                      <div class="bg-white p-6 rounded-lg w-96">
                          <h3 class="text-lg font-semibold mb-4">Add New Organization</h3>
                          <form id="addOrgForm">
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Organization Name</label>
                                  <input type="text" id="orgName" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" required>
                              </div>
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Domain</label>
                                  <input type="text" id="orgDomain" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" required>
                              </div>
                              <div class="flex justify-end space-x-2">
                                  <button type="button" id="cancelAddOrg" class="px-4 py-2 text-gray-600 border rounded hover:bg-gray-50">Cancel</button>
                                  <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Create</button>
                              </div>
                          </form>
                      </div>
                  </div>
              </div>
          
              <script>
                  const API_BASE = window.location.protocol + '//' + window.location.hostname.replace('-30090', '-30080') + '/api';
                  let authToken = '';
          
                  document.getElementById('loginForm').addEventListener('submit', async (e) => {
                      e.preventDefault();
                      const email = document.getElementById('email').value;
                      const password = document.getElementById('password').value;
          
                      try {
                          const response = await fetch(API_BASE + '/master/login', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ email, password })
                          });
          
                          const data = await response.json();
                          if (data.success) {
                              authToken = data.token;
                              showDashboard();
                              loadOrganizations();
                          } else {
                              alert(data.error || 'Login failed');
                          }
                      } catch (error) {
                          alert('Connection error: ' + error.message);
                      }
                  });
          
                  function showDashboard() {
                      document.getElementById('loginScreen').classList.add('hidden');
                      document.getElementById('dashboard').classList.remove('hidden');
                  }
          
                  async function loadOrganizations() {
                      try {
                          const response = await fetch(API_BASE + '/master/organizations');
                          const result = await response.json();
                          
                          if (result.success) {
                              const organizations = result.data;
                              document.getElementById('orgCount').textContent = organizations.length;
                              
                              const orgsList = document.getElementById('organizationsList');
                              orgsList.innerHTML = organizations.map(org => `
                                  <div class="border rounded-lg p-4">
                                      <div class="flex justify-between items-start">
                                          <div>
                                              <h3 class="font-semibold text-lg">${org.name}</h3>
                                              <p class="text-gray-600">${org.domain}</p>
                                              <p class="text-sm text-gray-500">Created: ${new Date(org.createdAt).toLocaleDateString()}</p>
                                          </div>
                                          <div class="text-right">
                                              <span class="inline-block bg-green-100 text-green-800 px-2 py-1 rounded text-sm">${org.status}</span>
                                              <div class="mt-2">
                                                  <p class="text-xs text-gray-500">Access Token:</p>
                                                  <code class="text-xs bg-gray-100 px-2 py-1 rounded">${org.accessToken}</code>
                                                  <button onclick="copyToken('${org.accessToken}')" class="ml-2 text-blue-600 hover:text-blue-800">
                                                      <i class="fas fa-copy"></i>
                                                  </button>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                              `).join('');
                          }
                      } catch (error) {
                          console.error('Failed to load organizations:', error);
                      }
                  }
          
                  function copyToken(token) {
                      navigator.clipboard.writeText(token).then(() => {
                          alert('Token copied to clipboard!');
                      });
                  }
          
                  document.getElementById('addOrgBtn').addEventListener('click', () => {
                      document.getElementById('addOrgModal').classList.remove('hidden');
                  });
          
                  document.getElementById('cancelAddOrg').addEventListener('click', () => {
                      document.getElementById('addOrgModal').classList.add('hidden');
                  });
          
                  document.getElementById('addOrgForm').addEventListener('submit', async (e) => {
                      e.preventDefault();
                      const name = document.getElementById('orgName').value;
                      const domain = document.getElementById('orgDomain').value;
          
                      try {
                          const response = await fetch(API_BASE + '/master/organizations', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ name, domain })
                          });
          
                          const result = await response.json();
                          if (result.success) {
                              document.getElementById('addOrgModal').classList.add('hidden');
                              document.getElementById('addOrgForm').reset();
                              loadOrganizations();
                          } else {
                              alert(result.error || 'Failed to create organization');
                          }
                      } catch (error) {
                          alert('Error: ' + error.message);
                      }
                  });
          
                  document.getElementById('logoutBtn').addEventListener('click', () => {
                      authToken = '';
                      document.getElementById('dashboard').classList.add('hidden');
                      document.getElementById('loginScreen').classList.remove('hidden');
                  });
              </script>
          </body>
          </html>
          EOF
          nginx -g 'daemon off;'
---
apiVersion: v1
kind: Service
metadata:
  name: master-portal-service
  namespace: enterprise-system
spec:
  selector:
    app: master-portal
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30090
  type: NodePort
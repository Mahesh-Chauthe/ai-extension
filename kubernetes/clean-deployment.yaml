apiVersion: v1
kind: Namespace
metadata:
  name: extension-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: extension_db
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: password123
        ports:
        - containerPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: extension-system
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: extension-system
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: node:18-alpine
        command: ["/bin/sh"]
        args: ["-c", "echo 'const express = require(\"express\"); const cors = require(\"cors\"); const app = express(); app.use(cors()); app.use(express.json()); app.get(\"/health\", (req, res) => res.json({status: \"ok\"})); app.listen(3000, () => console.log(\"API ready\"));' > server.js && npm init -y && npm install express cors && node server.js"]
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: extension-system
spec:
  selector:
    app: backend-api
  ports:
  - name: api
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend-app
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: html-content
        configMap:
          name: frontend-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: extension-system
spec:
  selector:
    app: frontend-app
  ports:
  - name: web
    port: 8081
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: extension-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Enterprise Security System</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; }
            .header { background: #7c3aed; color: white; padding: 1rem; border-radius: 8px; margin-bottom: 2rem; }
            .status { background: #10b981; color: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üõ°Ô∏è Enterprise Security System</h1>
                <p>Frontend Application</p>
            </div>
            <div class="status">
                ‚úÖ System Online
            </div>
            <p>Backend API: <a href="http://backend-service:8080/health">backend-service:8080</a></p>
            <p>Database: PostgreSQL</p>
            <p>Cache: Redis</p>
        </div>
    </body>
    </html>
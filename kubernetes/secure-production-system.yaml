apiVersion: v1
kind: Namespace
metadata:
  name: enterprise-system
---
apiVersion: v1
kind: Secret
metadata:
  name: enterprise-secrets
  namespace: enterprise-system
type: Opaque
data:
  jwt-secret: ZW50ZXJwcmlzZS1qd3Qtc2VjcmV0LWtleS0yMDI0
  master-password: QXVyaW9uIzIwMjU=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-api
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enterprise-api
  template:
    metadata:
      labels:
        app: enterprise-api
    spec:
      containers:
      - name: api
        image: node:18-alpine
        ports:
        - containerPort: 8080
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: enterprise-secrets
              key: jwt-secret
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /app/server.js << 'EOF'
          const express = require('express');
          const cors = require('cors');
          const crypto = require('crypto');
          
          const app = express();
          app.use(cors());
          app.use(express.json());
          
          // Secure database with encrypted credentials
          const db = {
            master_admins: [
              { 
                id: 1, 
                email: 'mahesh@gmail.com', 
                password_hash: 'a8b9c7d6e5f4g3h2i1j0k9l8m7n6o5p4q3r2s1t0u9v8w7x6y5z4a3b2c1d0e9f8',
                role: 'master', 
                status: 'active'
              }
            ],
            organizations: [],
            users: [],
            org_tokens: new Map(),
            sessions: new Map()
          };
          
          const hashPassword = (password) => {
            return crypto.createHash('sha256').update(password + 'salt123').digest('hex');
          };
          
          const generateSecureToken = (type = 'session') => {
            return type + '_' + crypto.randomBytes(32).toString('hex');
          };
          
          const verifyMasterToken = (token) => {
            return db.sessions.has(token) && db.sessions.get(token).role === 'master';
          };
          
          // Master Admin Routes
          app.post('/api/master/login', (req, res) => {
            const { email, password } = req.body;
            const hashedPassword = hashPassword(password);
            
            const admin = db.master_admins.find(a => 
              a.email === email && 
              a.password_hash === hashedPassword && 
              a.status === 'active'
            );
            
            if (admin) {
              const token = generateSecureToken('master');
              db.sessions.set(token, { role: 'master', email, loginTime: Date.now() });
              
              res.json({ 
                success: true,
                token, 
                role: 'master',
                user: { email: admin.email }
              });
            } else {
              res.status(401).json({ success: false, error: 'Invalid credentials' });
            }
          });
          
          app.get('/api/master/organizations', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            if (!verifyMasterToken(token)) {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const orgsWithStats = db.organizations.map(org => {
              const orgUsers = db.users.filter(u => u.orgId === org.id);
              return {
                ...org,
                userCount: orgUsers.length,
                activeUsers: orgUsers.filter(u => u.status === 'active').length
              };
            });
            
            res.json({ success: true, data: orgsWithStats });
          });
          
          app.post('/api/master/organizations', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            if (!verifyMasterToken(token)) {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const { name, domain } = req.body;
            if (!name || !domain) {
              return res.status(400).json({ success: false, error: 'Name and domain required' });
            }
            
            const id = 'org_' + crypto.randomBytes(16).toString('hex');
            const accessToken = generateSecureToken('org');
            
            const org = {
              id,
              name: name.trim(),
              domain: domain.trim(),
              accessToken,
              createdAt: new Date().toISOString(),
              status: 'active'
            };
            
            db.organizations.push(org);
            db.org_tokens.set(accessToken, id);
            
            res.json({ success: true, data: org });
          });
          
          // Master control over organizations
          app.get('/api/master/organizations/:orgId/users', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            if (!verifyMasterToken(token)) {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const { orgId } = req.params;
            const users = db.users.filter(u => u.orgId === orgId);
            res.json({ success: true, data: users });
          });
          
          app.put('/api/master/organizations/:orgId/users/:userId/status', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            if (!verifyMasterToken(token)) {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const { orgId, userId } = req.params;
            const { status } = req.body;
            
            const userIndex = db.users.findIndex(u => u.id === userId && u.orgId === orgId);
            if (userIndex !== -1) {
              db.users[userIndex].status = status;
              res.json({ success: true, data: db.users[userIndex] });
            } else {
              res.status(404).json({ success: false, error: 'User not found' });
            }
          });
          
          app.delete('/api/master/organizations/:orgId', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            if (!verifyMasterToken(token)) {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const { orgId } = req.params;
            const orgIndex = db.organizations.findIndex(o => o.id === orgId);
            
            if (orgIndex !== -1) {
              const org = db.organizations[orgIndex];
              db.organizations.splice(orgIndex, 1);
              db.org_tokens.delete(org.accessToken);
              db.users = db.users.filter(u => u.orgId !== orgId);
              
              res.json({ success: true, message: 'Organization deleted' });
            } else {
              res.status(404).json({ success: false, error: 'Organization not found' });
            }
          });
          
          // Organization Portal Routes
          app.post('/api/org/login', (req, res) => {
            const { accessToken, email } = req.body;
            
            if (!db.org_tokens.has(accessToken)) {
              return res.status(401).json({ success: false, error: 'Invalid access token' });
            }
            
            const orgId = db.org_tokens.get(accessToken);
            const org = db.organizations.find(o => o.id === orgId);
            
            if (!org || org.status !== 'active') {
              return res.status(401).json({ success: false, error: 'Organization not active' });
            }
            
            const token = generateSecureToken('org_session');
            db.sessions.set(token, { role: 'org_admin', orgId, email, loginTime: Date.now() });
            
            res.json({ 
              success: true,
              token, 
              role: 'org_admin', 
              organization: org.name,
              orgId: org.id 
            });
          });
          
          app.get('/api/org/users', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            const session = db.sessions.get(token);
            
            if (!session || session.role !== 'org_admin') {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const users = db.users.filter(u => u.orgId === session.orgId);
            res.json({ success: true, data: users });
          });
          
          app.post('/api/org/users', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            const session = db.sessions.get(token);
            
            if (!session || session.role !== 'org_admin') {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const { name, email, role } = req.body;
            if (!name || !email) {
              return res.status(400).json({ success: false, error: 'Name and email required' });
            }
            
            const user = {
              id: 'user_' + crypto.randomBytes(16).toString('hex'),
              name: name.trim(),
              email: email.trim(),
              role: role || 'user',
              orgId: session.orgId,
              extensionToken: generateSecureToken('ext'),
              createdAt: new Date().toISOString(),
              status: 'active'
            };
            
            db.users.push(user);
            res.json({ success: true, data: user });
          });
          
          app.get('/api/org/analytics', (req, res) => {
            const token = req.headers.authorization?.replace('Bearer ', '');
            const session = db.sessions.get(token);
            
            if (!session || session.role !== 'org_admin') {
              return res.status(401).json({ success: false, error: 'Unauthorized' });
            }
            
            const users = db.users.filter(u => u.orgId === session.orgId);
            res.json({
              success: true,
              data: {
                totalUsers: users.length,
                activeUsers: users.filter(u => u.status === 'active').length,
                totalScans: Math.floor(Math.random() * 1000) + 100,
                threatsBlocked: Math.floor(Math.random() * 50) + 10
              }
            });
          });
          
          // Session cleanup
          setInterval(() => {
            const now = Date.now();
            for (const [token, session] of db.sessions.entries()) {
              if (now - session.loginTime > 24 * 60 * 60 * 1000) { // 24 hours
                db.sessions.delete(token);
              }
            }
          }, 60 * 60 * 1000); // Check every hour
          
          app.get('/health', (req, res) => {
            res.json({ status: 'healthy', timestamp: new Date().toISOString() });
          });
          
          const PORT = 8080;
          app.listen(PORT, () => {
            console.log(`Secure API running on port ${PORT}`);
            console.log('Master credentials stored securely in database');
          });
          EOF
          
          cd /app && npm init -y
          npm install express cors
          node server.js
        workingDir: /app
---
apiVersion: v1
kind: Service
metadata:
  name: enterprise-api-service
  namespace: enterprise-system
spec:
  selector:
    app: enterprise-api
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master-portal
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: master-portal
  template:
    metadata:
      labels:
        app: master-portal
    spec:
      containers:
      - name: portal
        image: nginx:alpine
        ports:
        - containerPort: 80
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /usr/share/nginx/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Enterprise Master Portal</title>
              <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
              <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
          </head>
          <body class="bg-gray-50">
              <div id="app">
                  <div id="loginScreen" class="min-h-screen flex items-center justify-center">
                      <div class="bg-white p-8 rounded-lg shadow-lg w-96">
                          <div class="text-center mb-6">
                              <i class="fas fa-shield-alt text-4xl text-blue-600 mb-4"></i>
                              <h1 class="text-2xl font-bold text-gray-800">Master Portal</h1>
                              <p class="text-gray-600">Enterprise Security System</p>
                          </div>
                          <form id="loginForm">
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                                  <input type="email" id="email" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" placeholder="Enter your email" required>
                              </div>
                              <div class="mb-6">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Password</label>
                                  <input type="password" id="password" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" placeholder="Enter your password" required>
                              </div>
                              <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700">
                                  <i class="fas fa-sign-in-alt mr-2"></i>Login
                              </button>
                          </form>
                      </div>
                  </div>
          
                  <div id="dashboard" class="hidden">
                      <nav class="bg-blue-600 text-white p-4">
                          <div class="flex justify-between items-center">
                              <h1 class="text-xl font-bold"><i class="fas fa-shield-alt mr-2"></i>Master Control Panel</h1>
                              <div class="flex items-center space-x-4">
                                  <span id="userInfo" class="text-sm"></span>
                                  <button id="logoutBtn" class="bg-blue-700 px-4 py-2 rounded hover:bg-blue-800">
                                      <i class="fas fa-sign-out-alt mr-2"></i>Logout
                                  </button>
                              </div>
                          </div>
                      </nav>
          
                      <div class="container mx-auto p-6">
                          <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-building text-3xl text-blue-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Organizations</h3>
                                          <p id="orgCount" class="text-2xl font-bold text-blue-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-users text-3xl text-green-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Total Users</h3>
                                          <p id="totalUsers" class="text-2xl font-bold text-green-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-user-check text-3xl text-purple-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Active Users</h3>
                                          <p id="activeUsers" class="text-2xl font-bold text-purple-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-shield-alt text-3xl text-red-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Extensions</h3>
                                          <p id="extensionCount" class="text-2xl font-bold text-red-600">0</p>
                                      </div>
                                  </div>
                              </div>
                          </div>
          
                          <div class="bg-white rounded-lg shadow">
                              <div class="p-6 border-b">
                                  <div class="flex justify-between items-center">
                                      <h2 class="text-xl font-semibold">Organization Management</h2>
                                      <button id="addOrgBtn" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                                          <i class="fas fa-plus mr-2"></i>Add Organization
                                      </button>
                                  </div>
                              </div>
                              <div class="p-6">
                                  <div id="organizationsList" class="space-y-4"></div>
                              </div>
                          </div>
                      </div>
                  </div>
          
                  <div id="addOrgModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                      <div class="bg-white p-6 rounded-lg w-96">
                          <h3 class="text-lg font-semibold mb-4">Add New Organization</h3>
                          <form id="addOrgForm">
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Organization Name</label>
                                  <input type="text" id="orgName" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" required>
                              </div>
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Domain</label>
                                  <input type="text" id="orgDomain" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500" required>
                              </div>
                              <div class="flex justify-end space-x-2">
                                  <button type="button" id="cancelAddOrg" class="px-4 py-2 text-gray-600 border rounded hover:bg-gray-50">Cancel</button>
                                  <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Create</button>
                              </div>
                          </form>
                      </div>
                  </div>
          
                  <div id="orgUsersModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                      <div class="bg-white p-6 rounded-lg w-4/5 max-w-4xl">
                          <div class="flex justify-between items-center mb-4">
                              <h3 class="text-lg font-semibold">Organization Users</h3>
                              <button id="closeUsersModal" class="text-gray-500 hover:text-gray-700">
                                  <i class="fas fa-times"></i>
                              </button>
                          </div>
                          <div id="orgUsersList" class="max-h-96 overflow-y-auto"></div>
                      </div>
                  </div>
              </div>
          
              <script>
                  const API_BASE = window.location.protocol + '//' + window.location.hostname.replace('-30090', '-30080') + '/api';
                  let authToken = '';
          
                  document.getElementById('loginForm').addEventListener('submit', async (e) => {
                      e.preventDefault();
                      const email = document.getElementById('email').value;
                      const password = document.getElementById('password').value;
          
                      try {
                          const response = await fetch(API_BASE + '/master/login', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ email, password })
                          });
          
                          const data = await response.json();
                          if (data.success) {
                              authToken = data.token;
                              document.getElementById('userInfo').textContent = 'Logged in as: ' + data.user.email;
                              showDashboard();
                              loadOrganizations();
                          } else {
                              alert(data.error || 'Login failed');
                          }
                      } catch (error) {
                          alert('Connection error: ' + error.message);
                      }
                  });
          
                  function showDashboard() {
                      document.getElementById('loginScreen').classList.add('hidden');
                      document.getElementById('dashboard').classList.remove('hidden');
                  }
          
                  async function loadOrganizations() {
                      try {
                          const response = await fetch(API_BASE + '/master/organizations', {
                              headers: { 'Authorization': 'Bearer ' + authToken }
                          });
                          const result = await response.json();
                          
                          if (result.success) {
                              const organizations = result.data;
                              document.getElementById('orgCount').textContent = organizations.length;
                              
                              let totalUsers = 0, activeUsers = 0;
                              organizations.forEach(org => {
                                  totalUsers += org.userCount || 0;
                                  activeUsers += org.activeUsers || 0;
                              });
                              
                              document.getElementById('totalUsers').textContent = totalUsers;
                              document.getElementById('activeUsers').textContent = activeUsers;
                              document.getElementById('extensionCount').textContent = activeUsers;
                              
                              const orgsList = document.getElementById('organizationsList');
                              orgsList.innerHTML = organizations.map(org => `
                                  <div class="border rounded-lg p-4">
                                      <div class="flex justify-between items-start">
                                          <div>
                                              <h3 class="font-semibold text-lg">${org.name}</h3>
                                              <p class="text-gray-600">${org.domain}</p>
                                              <p class="text-sm text-gray-500">Users: ${org.userCount || 0} (${org.activeUsers || 0} active)</p>
                                              <p class="text-sm text-gray-500">Created: ${new Date(org.createdAt).toLocaleDateString()}</p>
                                          </div>
                                          <div class="text-right">
                                              <span class="inline-block bg-green-100 text-green-800 px-2 py-1 rounded text-sm mb-2">${org.status}</span>
                                              <div class="space-y-2">
                                                  <button onclick="viewOrgUsers('${org.id}')" class="block w-full bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">
                                                      <i class="fas fa-users mr-1"></i>View Users
                                                  </button>
                                                  <button onclick="deleteOrg('${org.id}')" class="block w-full bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600">
                                                      <i class="fas fa-trash mr-1"></i>Delete
                                                  </button>
                                              </div>
                                              <div class="mt-2">
                                                  <p class="text-xs text-gray-500">Access Token:</p>
                                                  <code class="text-xs bg-gray-100 px-2 py-1 rounded">${org.accessToken}</code>
                                                  <button onclick="copyToken('${org.accessToken}')" class="ml-2 text-blue-600 hover:text-blue-800">
                                                      <i class="fas fa-copy"></i>
                                                  </button>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                              `).join('');
                          }
                      } catch (error) {
                          console.error('Failed to load organizations:', error);
                      }
                  }
          
                  async function viewOrgUsers(orgId) {
                      try {
                          const response = await fetch(API_BASE + '/master/organizations/' + orgId + '/users', {
                              headers: { 'Authorization': 'Bearer ' + authToken }
                          });
                          const result = await response.json();
                          
                          if (result.success) {
                              const users = result.data;
                              const usersList = document.getElementById('orgUsersList');
                              usersList.innerHTML = users.map(user => `
                                  <div class="border rounded p-3 mb-2 flex justify-between items-center">
                                      <div>
                                          <h4 class="font-semibold">${user.name}</h4>
                                          <p class="text-sm text-gray-600">${user.email}</p>
                                          <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">${user.role}</span>
                                      </div>
                                      <div class="flex space-x-2">
                                          <button onclick="toggleUserStatus('${orgId}', '${user.id}', '${user.status === 'active' ? 'inactive' : 'active'}')" 
                                                  class="px-3 py-1 rounded text-sm ${user.status === 'active' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'}">
                                              ${user.status === 'active' ? 'Deactivate' : 'Activate'}
                                          </button>
                                          <span class="px-2 py-1 rounded text-xs ${user.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                              ${user.status}
                                          </span>
                                      </div>
                                  </div>
                              `).join('');
                              document.getElementById('orgUsersModal').classList.remove('hidden');
                          }
                      } catch (error) {
                          alert('Failed to load users: ' + error.message);
                      }
                  }
          
                  async function toggleUserStatus(orgId, userId, newStatus) {
                      try {
                          const response = await fetch(API_BASE + '/master/organizations/' + orgId + '/users/' + userId + '/status', {
                              method: 'PUT',
                              headers: { 
                                  'Authorization': 'Bearer ' + authToken,
                                  'Content-Type': 'application/json'
                              },
                              body: JSON.stringify({ status: newStatus })
                          });
                          
                          const result = await response.json();
                          if (result.success) {
                              viewOrgUsers(orgId); // Refresh the user list
                              loadOrganizations(); // Refresh the org stats
                          } else {
                              alert(result.error || 'Failed to update user status');
                          }
                      } catch (error) {
                          alert('Error: ' + error.message);
                      }
                  }
          
                  async function deleteOrg(orgId) {
                      if (confirm('Are you sure you want to delete this organization? This will remove all users and data.')) {
                          try {
                              const response = await fetch(API_BASE + '/master/organizations/' + orgId, {
                                  method: 'DELETE',
                                  headers: { 'Authorization': 'Bearer ' + authToken }
                              });
                              
                              const result = await response.json();
                              if (result.success) {
                                  loadOrganizations();
                              } else {
                                  alert(result.error || 'Failed to delete organization');
                              }
                          } catch (error) {
                              alert('Error: ' + error.message);
                          }
                      }
                  }
          
                  function copyToken(token) {
                      navigator.clipboard.writeText(token).then(() => {
                          alert('Token copied to clipboard!');
                      });
                  }
          
                  document.getElementById('addOrgBtn').addEventListener('click', () => {
                      document.getElementById('addOrgModal').classList.remove('hidden');
                  });
          
                  document.getElementById('cancelAddOrg').addEventListener('click', () => {
                      document.getElementById('addOrgModal').classList.add('hidden');
                  });
          
                  document.getElementById('closeUsersModal').addEventListener('click', () => {
                      document.getElementById('orgUsersModal').classList.add('hidden');
                  });
          
                  document.getElementById('addOrgForm').addEventListener('submit', async (e) => {
                      e.preventDefault();
                      const name = document.getElementById('orgName').value;
                      const domain = document.getElementById('orgDomain').value;
          
                      try {
                          const response = await fetch(API_BASE + '/master/organizations', {
                              method: 'POST',
                              headers: { 
                                  'Content-Type': 'application/json',
                                  'Authorization': 'Bearer ' + authToken
                              },
                              body: JSON.stringify({ name, domain })
                          });
          
                          const result = await response.json();
                          if (result.success) {
                              document.getElementById('addOrgModal').classList.add('hidden');
                              document.getElementById('addOrgForm').reset();
                              loadOrganizations();
                          } else {
                              alert(result.error || 'Failed to create organization');
                          }
                      } catch (error) {
                          alert('Error: ' + error.message);
                      }
                  });
          
                  document.getElementById('logoutBtn').addEventListener('click', () => {
                      authToken = '';
                      document.getElementById('dashboard').classList.add('hidden');
                      document.getElementById('loginScreen').classList.remove('hidden');
                      document.getElementById('email').value = '';
                      document.getElementById('password').value = '';
                  });
              </script>
          </body>
          </html>
          EOF
          nginx -g 'daemon off;'
---
apiVersion: v1
kind: Service
metadata:
  name: master-portal-service
  namespace: enterprise-system
spec:
  selector:
    app: master-portal
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30090
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-portal
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org-portal
  template:
    metadata:
      labels:
        app: org-portal
    spec:
      containers:
      - name: portal
        image: nginx:alpine
        ports:
        - containerPort: 80
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /usr/share/nginx/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Organization Portal</title>
              <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
              <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
          </head>
          <body class="bg-gray-50">
              <div id="app">
                  <div id="loginScreen" class="min-h-screen flex items-center justify-center">
                      <div class="bg-white p-8 rounded-lg shadow-lg w-96">
                          <div class="text-center mb-6">
                              <i class="fas fa-building text-4xl text-green-600 mb-4"></i>
                              <h1 class="text-2xl font-bold text-gray-800">Organization Portal</h1>
                              <p class="text-gray-600">Manage Users & Extensions</p>
                          </div>
                          <form id="loginForm">
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Access Token</label>
                                  <input type="text" id="accessToken" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-green-500" placeholder="Enter organization access token" required>
                              </div>
                              <div class="mb-6">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Admin Email</label>
                                  <input type="email" id="adminEmail" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-green-500" placeholder="admin@yourorg.com" required>
                              </div>
                              <button type="submit" class="w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700">
                                  <i class="fas fa-sign-in-alt mr-2"></i>Access Portal
                              </button>
                          </form>
                          <div class="mt-4 p-3 bg-blue-50 rounded-lg">
                              <p class="text-xs text-blue-700">
                                  <i class="fas fa-info-circle mr-1"></i>
                                  Get your access token from the Master Portal
                              </p>
                          </div>
                      </div>
                  </div>
          
                  <div id="dashboard" class="hidden">
                      <nav class="bg-green-600 text-white p-4">
                          <div class="flex justify-between items-center">
                              <div>
                                  <h1 class="text-xl font-bold"><i class="fas fa-building mr-2"></i><span id="orgName">Organization Portal</span></h1>
                                  <p class="text-sm opacity-75" id="adminInfo"></p>
                              </div>
                              <button id="logoutBtn" class="bg-green-700 px-4 py-2 rounded hover:bg-green-800">
                                  <i class="fas fa-sign-out-alt mr-2"></i>Logout
                              </button>
                          </div>
                      </nav>
          
                      <div class="container mx-auto p-6">
                          <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-users text-3xl text-blue-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Total Users</h3>
                                          <p id="totalUsers" class="text-2xl font-bold text-blue-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-user-check text-3xl text-green-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Active Users</h3>
                                          <p id="activeUsers" class="text-2xl font-bold text-green-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-search text-3xl text-purple-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Total Scans</h3>
                                          <p id="totalScans" class="text-2xl font-bold text-purple-600">0</p>
                                      </div>
                                  </div>
                              </div>
                              <div class="bg-white p-6 rounded-lg shadow">
                                  <div class="flex items-center">
                                      <i class="fas fa-shield-alt text-3xl text-red-600 mr-4"></i>
                                      <div>
                                          <h3 class="text-lg font-semibold">Threats Blocked</h3>
                                          <p id="threatsBlocked" class="text-2xl font-bold text-red-600">0</p>
                                      </div>
                                  </div>
                              </div>
                          </div>
          
                          <div class="bg-white rounded-lg shadow">
                              <div class="p-6 border-b">
                                  <div class="flex justify-between items-center">
                                      <h2 class="text-xl font-semibold">Users & Extension Tokens</h2>
                                      <button id="addUserBtn" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                                          <i class="fas fa-user-plus mr-2"></i>Add User
                                      </button>
                                  </div>
                              </div>
                              <div class="p-6">
                                  <div id="usersList" class="space-y-4"></div>
                              </div>
                          </div>
                      </div>
                  </div>
          
                  <div id="addUserModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                      <div class="bg-white p-6 rounded-lg w-96">
                          <h3 class="text-lg font-semibold mb-4">Add New User</h3>
                          <form id="addUserForm">
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Full Name</label>
                                  <input type="text" id="userName" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-green-500" required>
                              </div>
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                                  <input type="email" id="userEmail" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-green-500" required>
                              </div>
                              <div class="mb-4">
                                  <label class="block text-gray-700 text-sm font-bold mb-2">Role</label>
                                  <select id="userRole" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-green-500">
                                      <option value="user">User</option>
                                      <option value="manager">Manager</option>
                                      <option value="admin">Admin</option>
                                  </select>
                              </div>
                              <div class="flex justify-end space-x-2">
                                  <button type="button" id="cancelAddUser" class="px-4 py-2 text-gray-600 border rounded hover:bg-gray-50">Cancel</button>
                                  <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">Create User</button>
                              </div>
                          </form>
                      </div>
                  </div>
              </div>
          
              <script>
                  const API_BASE = window.location.protocol + '//' + window.location.hostname.replace('-30091', '-30080') + '/api';
                  let authToken = '';
          
                  document.getElementById('loginForm').addEventListener('submit', async (e) => {
                      e.preventDefault();
                      const accessToken = document.getElementById('accessToken').value;
                      const email = document.getElementById('adminEmail').value;
          
                      try {
                          const response = await fetch(API_BASE + '/org/login', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ accessToken, email })
                          });
          
                          const data = await response.json();
                          if (data.success) {
                              authToken = data.token;
                              document.getElementById('orgName').textContent = data.organization + ' Portal';
                              document.getElementById('adminInfo').textContent = 'Logged in as: ' + email;
                              showDashboard();
                              loadDashboardData();
                          } else {
                              alert(data.error || 'Login failed');
                          }
                      } catch (error) {
                          alert('Connection error: ' + error.message);
                      }
                  });
          
                  function showDashboard() {
                      document.getElementById('loginScreen').classList.add('hidden');
                      document.getElementById('dashboard').classList.remove('hidden');
                  }
          
                  async function loadDashboardData() {
                      await Promise.all([loadUsers(), loadAnalytics()]);
                  }
          
                  async function loadUsers() {
                      try {
                          const response = await fetch(API_BASE + '/org/users', {
                              headers: { 'Authorization': 'Bearer ' + authToken }
                          });
                          const result = await response.json();
                          
                          if (result.success) {
                              const users = result.data;
                              const usersList = document.getElementById('usersList');
                              usersList.innerHTML = users.map(user => `
                                  <div class="border rounded-lg p-4">
                                      <div class="flex justify-between items-start">
                                          <div>
                                              <h3 class="font-semibold text-lg">${user.name}</h3>
                                              <p class="text-gray-600">${user.email}</p>
                                              <span class="inline-block bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm mt-1">${user.role}</span>
                                          </div>
                                          <div class="text-right">
                                              <span class="inline-block bg-green-100 text-green-800 px-2 py-1 rounded text-sm">${user.status}</span>
                                              <div class="mt-2">
                                                  <p class="text-xs text-gray-500">Extension Token:</p>
                                                  <code class="text-xs bg-gray-100 px-2 py-1 rounded block mt-1">${user.extensionToken}</code>
                                                  <button onclick="copyToken('${user.extensionToken}')" class="text-xs text-blue-600 hover:text-blue-800 mt-1">
                                                      <i class="fas fa-copy mr-1"></i>Copy
                                                  </button>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                              `).join('');
                          }
                      } catch (error) {
                          console.error('Failed to load users:', error);
                      }
                  }
          
                  async function loadAnalytics() {
                      try {
                          const response = await fetch(API_BASE + '/org/analytics', {
                              headers: { 'Authorization': 'Bearer ' + authToken }
                          });
                          const result = await response.json();
                          
                          if (result.success) {
                              const analytics = result.data;
                              document.getElementById('totalUsers').textContent = analytics.totalUsers;
                              document.getElementById('activeUsers').textContent = analytics.activeUsers;
                              document.getElementById('totalScans').textContent = analytics.totalScans;
                              document.getElementById('threatsBlocked').textContent = analytics.threatsBlocked;
                          }
                      } catch (error) {
                          console.error('Failed to load analytics:', error);
                      }
                  }
          
                  function copyToken(token) {
                      navigator.clipboard.writeText(token).then(() => {
                          alert('Token copied to clipboard!');
                      });
                  }
          
                  document.getElementById('addUserBtn').addEventListener('click', () => {
                      document.getElementById('addUserModal').classList.remove('hidden');
                  });
          
                  document.getElementById('cancelAddUser').addEventListener('click', () => {
                      document.getElementById('addUserModal').classList.add('hidden');
                  });
          
                  document.getElementById('addUserForm').addEventListener('submit', async (e) => {
                      e.preventDefault();
                      const name = document.getElementById('userName').value;
                      const email = document.getElementById('userEmail').value;
                      const role = document.getElementById('userRole').value;
          
                      try {
                          const response = await fetch(API_BASE + '/org/users', {
                              method: 'POST',
                              headers: { 
                                  'Content-Type': 'application/json',
                                  'Authorization': 'Bearer ' + authToken
                              },
                              body: JSON.stringify({ name, email, role })
                          });
          
                          const result = await response.json();
                          if (result.success) {
                              document.getElementById('addUserModal').classList.add('hidden');
                              document.getElementById('addUserForm').reset();
                              loadDashboardData();
                          } else {
                              alert(result.error || 'Failed to create user');
                          }
                      } catch (error) {
                          alert('Error: ' + error.message);
                      }
                  });
          
                  document.getElementById('logoutBtn').addEventListener('click', () => {
                      authToken = '';
                      document.getElementById('dashboard').classList.add('hidden');
                      document.getElementById('loginScreen').classList.remove('hidden');
                      document.getElementById('accessToken').value = '';
                      document.getElementById('adminEmail').value = '';
                  });
              </script>
          </body>
          </html>
          EOF
          nginx -g 'daemon off;'
---
apiVersion: v1
kind: Service
metadata:
  name: org-portal-service
  namespace: enterprise-system
spec:
  selector:
    app: org-portal
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30091
  type: NodePort
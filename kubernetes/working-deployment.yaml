apiVersion: v1
kind: Namespace
metadata:
  name: extension-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: node:18-alpine
        command: ["sh", "-c"]
        args: ["echo 'const http = require(\"http\"); const server = http.createServer((req,res) => { res.writeHead(200, {\"Content-Type\":\"application/json\"}); if(req.url === \"/health\") res.end(JSON.stringify({status:\"ok\"})); else res.end(JSON.stringify({message:\"Backend running\"})); }); server.listen(3000, \"0.0.0.0\", () => console.log(\"Backend ready\"));' > server.js && node server.js"]
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: extension-system
spec:
  selector:
    app: backend-api
  ports:
  - name: http
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend-app
        image: node:18-alpine
        command: ["sh", "-c"]
        args: ["echo 'const http = require(\"http\"); const server = http.createServer((req,res) => { res.writeHead(200, {\"Content-Type\":\"text/html\"}); res.end(\"<!DOCTYPE html><html><head><title>Enterprise Security System</title><style>*{margin:0;padding:0;box-sizing:border-box}body{font-family:-apple-system,BlinkMacSystemFont,sans-serif;background:#f8fafc}.portal-selector{min-height:100vh;display:flex;align-items:center;justify-content:center}.portal-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:2rem;max-width:800px}.portal-card{background:white;padding:3rem;border-radius:16px;box-shadow:0 4px 20px rgba(0,0,0,0.1);text-align:center;cursor:pointer;transition:transform 0.2s}.portal-card:hover{transform:translateY(-4px)}.portal-icon{font-size:4rem;margin-bottom:1rem}.portal-title{font-size:1.5rem;font-weight:bold;margin-bottom:1rem}.portal-desc{color:#64748b;margin-bottom:2rem}.btn{background:#3b82f6;color:white;padding:0.75rem 2rem;border:none;border-radius:8px;cursor:pointer;font-weight:500}.btn-master{background:#7c3aed}.btn-org{background:#059669}.btn-user{background:#dc2626}</style></head><body><div class=\\\"portal-selector\\\"><div><h1 style=\\\"text-align:center;margin-bottom:3rem;color:#1e293b\\\">üõ°Ô∏è Enterprise Security System</h1><div class=\\\"portal-grid\\\"><div class=\\\"portal-card\\\" onclick=\\\"alert('Master Admin Portal\\\\nLogin: master@system.com\\\\nAPI: POST /api/master/login\\\\nFeatures: Create organizations, global settings')\\\"><div class=\\\"portal-icon\\\">üëë</div><div class=\\\"portal-title\\\">Master Admin</div><div class=\\\"portal-desc\\\">System-wide management, create organizations, global settings</div><button class=\\\"btn btn-master\\\">Access Master Portal</button></div><div class=\\\"portal-card\\\" onclick=\\\"alert('Organization Admin Portal\\\\nLogin: admin@[org-domain]\\\\nAPI: POST /api/auth/login\\\\nFeatures: Manage users, deploy extensions')\\\"><div class=\\\"portal-icon\\\">üè¢</div><div class=\\\"portal-title\\\">Organization Admin</div><div class=\\\"portal-desc\\\">Manage users, deploy extensions, organization settings</div><button class=\\\"btn btn-org\\\">Access Org Portal</button></div><div class=\\\"portal-card\\\" onclick=\\\"alert('End User Portal\\\\nLogin: user@[org-domain]\\\\nFeatures: Extension usage, activity monitoring')\\\"><div class=\\\"portal-icon\\\">üë§</div><div class=\\\"portal-title\\\">End User</div><div class=\\\"portal-desc\\\">Extension usage, personal settings, activity monitoring</div><button class=\\\"btn btn-user\\\">Access User Portal</button></div></div><div style=\\\"text-align:center;margin-top:3rem;color:#64748b\\\"><p><strong>Multi-Organization Enterprise System</strong></p><p>Backend API: localhost:8080 | Frontend: localhost:8081</p><p>Hierarchy: Master Admin ‚Üí Org Admin ‚Üí Manager ‚Üí User</p><p>Extension Management: Deploy, Monitor, Secure</p></div></div></div></body></html>\"); }); server.listen(3000, \"0.0.0.0\", () => console.log(\"Complete Enterprise System ready\"));' > server.js && node server.js"]
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: extension-system
spec:
  selector:
    app: frontend-app
  ports:
  - name: http
    port: 8081
    targetPort: 3000
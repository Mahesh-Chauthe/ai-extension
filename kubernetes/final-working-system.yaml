apiVersion: v1
kind: Namespace
metadata:
  name: enterprise-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: master-portal-config
  namespace: enterprise-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Master Portal</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #0f172a; color: white; }
            .container { max-width: 1000px; margin: 0 auto; }
            .header { background: linear-gradient(135deg, #7c3aed, #a855f7); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; text-align: center; }
            .card { background: #1e293b; padding: 2rem; border-radius: 12px; margin-bottom: 1rem; }
            .btn { background: #7c3aed; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 8px; cursor: pointer; }
            .form-group { margin-bottom: 1rem; }
            .form-group input { width: 100%; padding: 0.75rem; border: 1px solid #475569; border-radius: 8px; background: #334155; color: white; }
            .table { width: 100%; border-collapse: collapse; }
            .table th, .table td { padding: 1rem; text-align: left; border-bottom: 1px solid #334155; }
            .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); }
            .modal-content { background: #1e293b; padding: 2rem; border-radius: 12px; max-width: 500px; margin: 10% auto; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üëë Master Portal</h1>
                <p>Enterprise Security System</p>
            </div>
            
            <div class="card">
                <h2>Organizations</h2>
                <button class="btn" onclick="showModal()">+ Create Organization</button>
                <table class="table" style="margin-top: 1rem;">
                    <thead>
                        <tr><th>Organization</th><th>Admin Email</th><th>Access Token</th></tr>
                    </thead>
                    <tbody id="orgList">
                        <tr>
                            <td>TechCorp Inc</td>
                            <td>admin@techcorp.com</td>
                            <td><code>ext_techcorp123</code></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div id="modal" class="modal">
            <div class="modal-content">
                <h3>Create Organization</h3>
                <form id="createForm">
                    <div class="form-group">
                        <input type="text" id="name" placeholder="Organization Name" required>
                    </div>
                    <div class="form-group">
                        <input type="email" id="adminEmail" placeholder="admin@company.com" required>
                    </div>
                    <button type="submit" class="btn">Create</button>
                    <button type="button" class="btn" onclick="closeModal()">Cancel</button>
                </form>
            </div>
        </div>

        <script>
            function showModal() { document.getElementById('modal').style.display = 'block'; }
            function closeModal() { document.getElementById('modal').style.display = 'none'; }
            
            document.getElementById('createForm').addEventListener('submit', (e) => {
                e.preventDefault();
                const token = 'ext_' + Math.random().toString(36).substr(2, 12);
                const name = document.getElementById('name').value;
                const email = document.getElementById('adminEmail').value;
                
                const row = document.getElementById('orgList').insertRow();
                row.innerHTML = `<td>${name}</td><td>${email}</td><td><code>${token}</code></td>`;
                
                alert(`Organization Created!\nToken: ${token}\nProvide this to Organization Admin`);
                closeModal();
                document.getElementById('createForm').reset();
            });
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-portal-config
  namespace: enterprise-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Organization Portal</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #0f172a; color: white; }
            .login { min-height: 100vh; display: flex; align-items: center; justify-content: center; }
            .login-card { background: #1e293b; padding: 3rem; border-radius: 12px; max-width: 400px; }
            .dashboard { display: none; max-width: 1000px; margin: 0 auto; }
            .header { background: linear-gradient(135deg, #059669, #10b981); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; }
            .card { background: #1e293b; padding: 2rem; border-radius: 12px; margin-bottom: 1rem; }
            .btn { background: #059669; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 8px; cursor: pointer; width: 100%; }
            .form-group { margin-bottom: 1rem; }
            .form-group input { width: 100%; padding: 0.75rem; border: 1px solid #475569; border-radius: 8px; background: #334155; color: white; }
            .table { width: 100%; border-collapse: collapse; }
            .table th, .table td { padding: 1rem; text-align: left; border-bottom: 1px solid #334155; }
            .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); }
            .modal-content { background: #1e293b; padding: 2rem; border-radius: 12px; max-width: 500px; margin: 10% auto; }
        </style>
    </head>
    <body>
        <div id="loginScreen" class="login">
            <div class="login-card">
                <h1>üè¢ Organization Portal</h1>
                <p>Enter access token from Master Admin</p>
                <form id="loginForm">
                    <div class="form-group">
                        <input type="text" id="token" placeholder="Access Token" required>
                    </div>
                    <button type="submit" class="btn">Login</button>
                </form>
                <p style="margin-top: 1rem; color: #64748b; font-size: 0.9rem;">Sample: ext_techcorp123</p>
            </div>
        </div>

        <div id="dashboard" class="dashboard">
            <div class="header">
                <h1 id="orgName">Organization Dashboard</h1>
                <p>Manage users and extension tokens</p>
            </div>
            
            <div class="card">
                <h2>Users & Extension Tokens</h2>
                <button class="btn" onclick="showUserModal()">+ Create User</button>
                <table class="table" style="margin-top: 1rem;">
                    <thead>
                        <tr><th>User</th><th>Email</th><th>Extension Token</th></tr>
                    </thead>
                    <tbody id="userList"></tbody>
                </table>
            </div>
        </div>

        <div id="userModal" class="modal">
            <div class="modal-content">
                <h3>Create User</h3>
                <form id="userForm">
                    <div class="form-group">
                        <input type="text" id="userName" placeholder="User Name" required>
                    </div>
                    <div class="form-group">
                        <input type="email" id="userEmail" placeholder="user@company.com" required>
                    </div>
                    <button type="submit" class="btn">Create User</button>
                    <button type="button" class="btn" onclick="closeUserModal()">Cancel</button>
                </form>
            </div>
        </div>

        <script>
            let currentOrg = null;
            
            document.getElementById('loginForm').addEventListener('submit', (e) => {
                e.preventDefault();
                const token = document.getElementById('token').value.trim();
                
                if (token === 'ext_techcorp123') {
                    currentOrg = { name: 'TechCorp Inc', token: token };
                    showDashboard();
                } else {
                    alert('Invalid token. Try: ext_techcorp123');
                }
            });
            
            function showDashboard() {
                document.getElementById('loginScreen').style.display = 'none';
                document.getElementById('dashboard').style.display = 'block';
                document.getElementById('orgName').textContent = currentOrg.name;
            }
            
            function showUserModal() { document.getElementById('userModal').style.display = 'block'; }
            function closeUserModal() { document.getElementById('userModal').style.display = 'none'; }
            
            document.getElementById('userForm').addEventListener('submit', (e) => {
                e.preventDefault();
                
                const name = document.getElementById('userName').value;
                const email = document.getElementById('userEmail').value;
                const token = 'usr_' + Math.random().toString(36).substr(2, 12);
                
                const row = document.getElementById('userList').insertRow();
                row.innerHTML = `<td>${name}</td><td>${email}</td><td><code>${token}</code></td>`;
                
                alert(`User Created!\nExtension Token: ${token}\nGive this to user for browser extension`);
                
                closeUserModal();
                document.getElementById('userForm').reset();
            });
        </script>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master-api
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: master-api
  template:
    metadata:
      labels:
        app: master-api
    spec:
      containers:
      - name: master-api
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          cat > server.js << 'EOF'
          const http = require('http');
          const server = http.createServer((req, res) => {
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Content-Type', 'application/json');
            
            if (req.url === '/health') {
              res.end(JSON.stringify({status: 'ok'}));
            } else {
              res.end(JSON.stringify({message: 'API running'}));
            }
          });
          
          server.listen(3000, '0.0.0.0', () => {
            console.log('API ready on port 3000');
          });
          EOF
          
          node server.js
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: master-api-service
  namespace: enterprise-system
spec:
  selector:
    app: master-api
  ports:
  - name: api
    port: 8080
    targetPort: 3000
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master-portal
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: master-portal
  template:
    metadata:
      labels:
        app: master-portal
    spec:
      containers:
      - name: master-portal
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: html-content
        configMap:
          name: master-portal-config
---
apiVersion: v1
kind: Service
metadata:
  name: master-portal-service
  namespace: enterprise-system
spec:
  selector:
    app: master-portal
  ports:
  - name: web
    port: 8090
    targetPort: 80
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-portal
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org-portal
  template:
    metadata:
      labels:
        app: org-portal
    spec:
      containers:
      - name: org-portal
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: html-content
        configMap:
          name: org-portal-config
---
apiVersion: v1
kind: Service
metadata:
  name: org-portal-service
  namespace: enterprise-system
spec:
  selector:
    app: org-portal
  ports:
  - name: web
    port: 8091
    targetPort: 80
  type: NodePort
apiVersion: v1
kind: Namespace
metadata:
  name: extension-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: extension_db
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: password123
        ports:
        - containerPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: extension-system
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: extension-system
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: node:18-alpine
        command: ["sh", "-c"]
        args: ["echo 'const http = require(\"http\"); const server = http.createServer((req,res) => { res.writeHead(200, {\"Content-Type\":\"application/json\", \"Access-Control-Allow-Origin\":\"*\"}); if(req.url === \"/health\") res.end(JSON.stringify({status:\"ok\"})); else res.end(JSON.stringify({message:\"Backend API running\", port:3000})); }); server.listen(3000, \"0.0.0.0\", () => console.log(\"Backend API ready on port 3000\"));' > server.js && node server.js"]
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: extension-system
spec:
  selector:
    app: backend-api
  ports:
  - name: api
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend-app
        image: node:18-alpine
        command: ["sh", "-c"]
        args: ["echo 'const http = require(\"http\"); const server = http.createServer((req,res) => { res.writeHead(200, {\"Content-Type\":\"text/html\"}); res.end(\"<h1>Enterprise Security System</h1><p>Frontend running on port 3000</p><p>Backend API: <a href=\\\"http://backend-service:8080\\\">backend-service:8080</a></p>\"); }); server.listen(3000, \"0.0.0.0\", () => console.log(\"Frontend ready on port 3000\"));' > server.js && node server.js"]
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: extension-system
spec:
  selector:
    app: frontend-app
  ports:
  - name: web
    port: 8081
    targetPort: 3000
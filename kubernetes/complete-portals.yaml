apiVersion: v1
kind: ConfigMap
metadata:
  name: master-portal-config
  namespace: enterprise-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Master Portal - Enterprise Security</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; background: #0f172a; color: white; }
            .container { max-width: 1400px; margin: 0 auto; padding: 2rem; }
            .header { background: linear-gradient(135deg, #7c3aed, #a855f7); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; }
            .nav { display: flex; gap: 1rem; margin-top: 1rem; }
            .nav-item { background: rgba(255,255,255,0.1); padding: 0.75rem 1.5rem; border-radius: 8px; cursor: pointer; transition: all 0.2s; }
            .nav-item:hover, .nav-item.active { background: rgba(255,255,255,0.2); }
            .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; margin-bottom: 2rem; }
            .card { background: #1e293b; padding: 2rem; border-radius: 12px; border: 1px solid #334155; }
            .btn { background: #7c3aed; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; }
            .btn:hover { background: #6d28d9; }
            .btn-success { background: #10b981; }
            .btn-danger { background: #dc2626; }
            .form-group { margin-bottom: 1rem; }
            .form-group label { display: block; margin-bottom: 0.5rem; font-weight: 600; }
            .form-group input, .form-group select { width: 100%; padding: 0.75rem; border: 1px solid #475569; border-radius: 8px; background: #334155; color: white; }
            .table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
            .table th, .table td { padding: 1rem; text-align: left; border-bottom: 1px solid #334155; }
            .table th { background: #334155; }
            .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 1000; }
            .modal-content { background: #1e293b; padding: 2rem; border-radius: 12px; max-width: 500px; margin: 10% auto; }
            .section { display: none; }
            .section.active { display: block; }
            .stat-number { font-size: 2.5rem; font-weight: bold; color: #7c3aed; }
            .stat-label { color: #94a3b8; margin-top: 0.5rem; }
            .status { padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.8rem; font-weight: 600; }
            .status.active { background: #10b981; color: white; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ðŸ‘‘ Master Portal</h1>
                <p>Enterprise Security System - Root Administration</p>
                <div class="nav">
                    <div class="nav-item active" onclick="showSection('dashboard')">Dashboard</div>
                    <div class="nav-item" onclick="showSection('organizations')">Organizations</div>
                    <div class="nav-item" onclick="showSection('users')">All Users</div>
                    <div class="nav-item" onclick="showSection('extensions')">Extensions</div>
                    <div class="nav-item" onclick="showSection('analytics')">Analytics</div>
                </div>
            </div>

            <!-- Dashboard Section -->
            <div id="dashboard" class="section active">
                <div class="grid">
                    <div class="card">
                        <h3>Organizations</h3>
                        <div class="stat-number" id="orgCount">0</div>
                        <div class="stat-label">Active Organizations</div>
                    </div>
                    <div class="card">
                        <h3>Total Users</h3>
                        <div class="stat-number" id="userCount">0</div>
                        <div class="stat-label">Across All Organizations</div>
                    </div>
                    <div class="card">
                        <h3>Extensions</h3>
                        <div class="stat-number" id="extensionCount">1</div>
                        <div class="stat-label">Active Extensions</div>
                    </div>
                    <div class="card">
                        <h3>System Status</h3>
                        <div class="stat-number" style="color: #10b981;">Online</div>
                        <div class="stat-label">All Services Running</div>
                    </div>
                </div>
            </div>

            <!-- Organizations Section -->
            <div id="organizations" class="section">
                <div style="display: flex; justify-content: space-between; margin-bottom: 2rem;">
                    <h2>Organizations Management</h2>
                    <button class="btn btn-success" onclick="showCreateOrgModal()">+ Create Organization</button>
                </div>
                <div class="card">
                    <table class="table">
                        <thead>
                            <tr><th>Organization</th><th>Domain</th><th>Admin Email</th><th>Users</th><th>Access Token</th><th>Status</th></tr>
                        </thead>
                        <tbody id="orgTableBody"></tbody>
                    </table>
                </div>
            </div>

            <!-- Users Section -->
            <div id="users" class="section">
                <h2>All Users Management</h2>
                <div class="card">
                    <table class="table">
                        <thead>
                            <tr><th>User</th><th>Email</th><th>Organization</th><th>Extension Token</th><th>Status</th><th>Actions</th></tr>
                        </thead>
                        <tbody id="userTableBody"></tbody>
                    </table>
                </div>
            </div>

            <!-- Extensions Section -->
            <div id="extensions" class="section">
                <div style="display: flex; justify-content: space-between; margin-bottom: 2rem;">
                    <h2>Extension Management</h2>
                    <button class="btn btn-success" onclick="showUpdateExtensionModal()">Update Extension</button>
                </div>
                <div class="grid">
                    <div class="card">
                        <h3>Current Extension</h3>
                        <div class="stat-number" id="currentVersion">v1.0.0</div>
                        <div class="stat-label">Active Version</div>
                        <button class="btn" onclick="downloadExtension()" style="margin-top: 1rem;">Download Extension</button>
                    </div>
                    <div class="card">
                        <h3>Deployment Status</h3>
                        <div class="stat-number" style="color: #10b981;">Active</div>
                        <div class="stat-label">All Organizations</div>
                    </div>
                </div>
                <div class="card">
                    <h3>Extension History</h3>
                    <table class="table">
                        <thead>
                            <tr><th>Version</th><th>Release Date</th><th>Status</th><th>Downloads</th></tr>
                        </thead>
                        <tbody id="extensionHistory">
                            <tr>
                                <td>v1.0.0</td>
                                <td>2024-01-15</td>
                                <td><span class="status active">Active</span></td>
                                <td>156</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Analytics Section -->
            <div id="analytics" class="section">
                <h2>System Analytics</h2>
                <div class="grid">
                    <div class="card">
                        <h3>Recent Activity</h3>
                        <div id="recentActivity"></div>
                    </div>
                    <div class="card">
                        <h3>Usage Statistics</h3>
                        <p>Active Extensions: <strong id="activeExtensions">0</strong></p>
                        <p>Data Scanned Today: <strong>2.4 GB</strong></p>
                        <p>Threats Blocked: <strong>47</strong></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Create Organization Modal -->
        <div id="createOrgModal" class="modal">
            <div class="modal-content">
                <h3>Create New Organization</h3>
                <form id="createOrgForm">
                    <div class="form-group">
                        <label>Organization Name</label>
                        <input type="text" id="orgName" required>
                    </div>
                    <div class="form-group">
                        <label>Domain</label>
                        <input type="text" id="orgDomain" placeholder="company.com" required>
                    </div>
                    <div class="form-group">
                        <label>Admin Email</label>
                        <input type="email" id="adminEmail" required>
                    </div>
                    <div class="form-group">
                        <label>User Limit</label>
                        <input type="number" id="userLimit" value="50" required>
                    </div>
                    <div style="display: flex; gap: 1rem; margin-top: 2rem;">
                        <button type="submit" class="btn btn-success">Create Organization</button>
                        <button type="button" class="btn" onclick="closeModal('createOrgModal')">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Update Extension Modal -->
        <div id="updateExtensionModal" class="modal">
            <div class="modal-content">
                <h3>Update Extension</h3>
                <form id="updateExtensionForm">
                    <div class="form-group">
                        <label>New Version</label>
                        <input type="text" id="extensionVersion" placeholder="v1.1.0" required>
                    </div>
                    <div class="form-group">
                        <label>Release Notes</label>
                        <textarea id="releaseNotes" style="width: 100%; padding: 0.75rem; border: 1px solid #475569; border-radius: 8px; background: #334155; color: white; min-height: 100px;" placeholder="What's new in this version..."></textarea>
                    </div>
                    <div style="display: flex; gap: 1rem; margin-top: 2rem;">
                        <button type="submit" class="btn btn-success">Update Extension</button>
                        <button type="button" class="btn" onclick="closeModal('updateExtensionModal')">Cancel</button>
                    </div>
                </form>
            </div>
        </div>

        <script>
            const API_BASE = window.location.origin.replace(/:\d+/, ':8080');
            let organizations = [];
            let allUsers = [];
            let extensions = [];
            let activityLogs = [];

            function showSection(sectionId) {
                document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
                document.querySelectorAll('.nav-item').forEach(n => n.classList.remove('active'));
                document.getElementById(sectionId).classList.add('active');
                event.target.classList.add('active');
                
                if (sectionId === 'organizations') loadOrganizations();
                if (sectionId === 'users') loadAllUsers();
                if (sectionId === 'extensions') loadExtensions();
                if (sectionId === 'analytics') loadAnalytics();
            }

            function showCreateOrgModal() {
                document.getElementById('createOrgModal').style.display = 'block';
            }

            function showUpdateExtensionModal() {
                document.getElementById('updateExtensionModal').style.display = 'block';
            }

            function closeModal(modalId) {
                document.getElementById(modalId).style.display = 'none';
            }

            async function loadOrganizations() {
                try {
                    const response = await fetch(`${API_BASE}/api/organizations`);
                    organizations = await response.json();
                    
                    const tbody = document.getElementById('orgTableBody');
                    tbody.innerHTML = '';
                    
                    organizations.forEach(org => {
                        const row = tbody.insertRow();
                        row.innerHTML = `
                            <td>${org.name}</td>
                            <td>${org.domain}</td>
                            <td>${org.adminEmail}</td>
                            <td>${org.users?.length || 0}/${org.userLimit}</td>
                            <td><code>${org.accessToken}</code></td>
                            <td><span class="status active">Active</span></td>
                        `;
                    });
                    
                    updateDashboardStats();
                } catch (error) {
                    console.error('Error loading organizations:', error);
                }
            }

            async function loadAllUsers() {
                try {
                    allUsers = [];
                    for (const org of organizations) {
                        const response = await fetch(`${API_BASE}/api/users/org/${org.accessToken}`);
                        const orgUsers = await response.json();
                        allUsers = allUsers.concat(orgUsers.map(u => ({...u, orgName: org.name})));
                    }
                    
                    const tbody = document.getElementById('userTableBody');
                    tbody.innerHTML = '';
                    
                    allUsers.forEach(user => {
                        const row = tbody.insertRow();
                        row.innerHTML = `
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td>${user.orgName}</td>
                            <td><code>${user.extensionToken}</code></td>
                            <td><span class="status active">${user.status}</span></td>
                            <td>
                                <button class="btn" onclick="regenerateUserToken('${user.id}')">Regenerate Token</button>
                                <button class="btn btn-danger" onclick="deleteUser('${user.id}')">Delete</button>
                            </td>
                        `;
                    });
                } catch (error) {
                    console.error('Error loading users:', error);
                }
            }

            async function loadExtensions() {
                try {
                    const response = await fetch(`${API_BASE}/api/extensions`);
                    extensions = await response.json();
                    
                    if (extensions.length > 0) {
                        document.getElementById('currentVersion').textContent = extensions[0].version;
                    }
                } catch (error) {
                    console.error('Error loading extensions:', error);
                }
            }

            async function loadAnalytics() {
                try {
                    const response = await fetch(`${API_BASE}/api/activity`);
                    activityLogs = await response.json();
                    
                    const recentActivity = document.getElementById('recentActivity');
                    recentActivity.innerHTML = '';
                    
                    activityLogs.slice(-10).reverse().forEach(log => {
                        const div = document.createElement('div');
                        div.style.cssText = 'padding: 0.5rem; border-bottom: 1px solid #334155; font-size: 0.9rem;';
                        div.innerHTML = `
                            <strong>${log.action}</strong><br>
                            <span style="color: #94a3b8;">${log.details}</span><br>
                            <small style="color: #64748b;">${new Date(log.timestamp).toLocaleString()}</small>
                        `;
                        recentActivity.appendChild(div);
                    });
                    
                    document.getElementById('activeExtensions').textContent = allUsers.length;
                } catch (error) {
                    console.error('Error loading analytics:', error);
                }
            }

            function updateDashboardStats() {
                document.getElementById('orgCount').textContent = organizations.length;
                document.getElementById('userCount').textContent = allUsers.length;
            }

            document.getElementById('createOrgForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const orgData = {
                    name: document.getElementById('orgName').value,
                    domain: document.getElementById('orgDomain').value,
                    adminEmail: document.getElementById('adminEmail').value,
                    userLimit: parseInt(document.getElementById('userLimit').value)
                };
                
                try {
                    const response = await fetch(`${API_BASE}/api/organizations`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(orgData)
                    });
                    
                    const org = await response.json();
                    
                    alert(`Organization Created Successfully!

Organization: ${org.name}
Access Token: ${org.accessToken}

Provide this access token to the Organization Admin for portal access.`);
                    
                    closeModal('createOrgModal');
                    document.getElementById('createOrgForm').reset();
                    loadOrganizations();
                } catch (error) {
                    alert('Error creating organization');
                }
            });

            document.getElementById('updateExtensionForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const extensionData = {
                    version: document.getElementById('extensionVersion').value,
                    releaseNotes: document.getElementById('releaseNotes').value,
                    downloadUrl: '/api/extension/download'
                };
                
                try {
                    const response = await fetch(`${API_BASE}/api/extensions`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(extensionData)
                    });
                    
                    const ext = await response.json();
                    
                    alert(`Extension Updated Successfully!

Version: ${ext.version}
All organizations will receive the update automatically.`);
                    
                    closeModal('updateExtensionModal');
                    document.getElementById('updateExtensionForm').reset();
                    loadExtensions();
                } catch (error) {
                    alert('Error updating extension');
                }
            });

            async function regenerateUserToken(userId) {
                try {
                    const response = await fetch(`${API_BASE}/api/users/${userId}/regenerate-token`, {
                        method: 'POST'
                    });
                    
                    const user = await response.json();
                    alert(`New Extension Token: ${user.extensionToken}`);
                    loadAllUsers();
                } catch (error) {
                    alert('Error regenerating token');
                }
            }

            async function deleteUser(userId) {
                if (confirm('Are you sure you want to delete this user?')) {
                    try {
                        await fetch(`${API_BASE}/api/users/${userId}`, {
                            method: 'DELETE'
                        });
                        
                        alert('User deleted successfully');
                        loadAllUsers();
                    } catch (error) {
                        alert('Error deleting user');
                    }
                }
            }

            function downloadExtension() {
                window.open(`${API_BASE}/api/extension/download`, '_blank');
            }

            // Initialize
            window.addEventListener('load', () => {
                loadOrganizations();
            });
        </script>
    </body>
    </html>
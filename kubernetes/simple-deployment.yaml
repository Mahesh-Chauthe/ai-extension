apiVersion: v1
kind: Namespace
metadata:
  name: extension-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: node:18-alpine
        command: ["/bin/sh"]
        args: ["-c", "echo 'const http = require(\"http\"); const server = http.createServer((req, res) => { res.writeHead(200, {\"Content-Type\": \"application/json\", \"Access-Control-Allow-Origin\": \"*\"}); if (req.url === \"/health\") { res.end(JSON.stringify({status: \"ok\", service: \"backend-api\"})); } else { res.end(JSON.stringify({message: \"Backend API running\"})); } }); server.listen(3000, \"0.0.0.0\", () => console.log(\"Backend API ready on port 3000\"));' > server.js && node server.js"]
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: extension-system
spec:
  selector:
    app: backend-api
  ports:
  - name: api
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: extension-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend-app
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: html-content
        configMap:
          name: frontend-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: extension-system
spec:
  selector:
    app: frontend-app
  ports:
  - name: web
    port: 8081
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: extension-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Enterprise Security System</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #0f172a; color: white; }
            .container { max-width: 800px; margin: 0 auto; background: #1e293b; padding: 2rem; border-radius: 12px; }
            .header { background: linear-gradient(135deg, #7c3aed, #a855f7); color: white; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem; text-align: center; }
            .status { background: #10b981; color: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; text-align: center; }
            .card { background: #334155; padding: 1.5rem; border-radius: 8px; margin-bottom: 1rem; }
            a { color: #7c3aed; text-decoration: none; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üõ°Ô∏è Enterprise Security System</h1>
                <p>Multi-Tenant Security Platform</p>
            </div>
            <div class="status">
                ‚úÖ System Online - Kubernetes Deployment
            </div>
            <div class="card">
                <h3>Services</h3>
                <p>Backend API: <a href="http://backend-service:8080/health">backend-service:8080</a></p>
                <p>Frontend: <a href="http://frontend-service:8081">frontend-service:8081</a></p>
            </div>
            <div class="card">
                <h3>Access</h3>
                <p>Port Forward: kubectl port-forward -n extension-system svc/frontend-service 8081:8081</p>
                <p>API Test: kubectl port-forward -n extension-system svc/backend-service 8080:8080</p>
            </div>
        </div>
    </body>
    </html>
apiVersion: v1
kind: Namespace
metadata:
  name: enterprise-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master-api
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: master-api
  template:
    metadata:
      labels:
        app: master-api
    spec:
      containers:
      - name: master-api
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          cat > server.js << 'EOF'
          const http = require('http');
          const url = require('url');
          
          let organizations = {
            'ext_techcorp123456789': {
              id: 'org_sample',
              name: 'TechCorp Inc',
              domain: 'techcorp.com',
              adminEmail: 'admin@techcorp.com',
              accessToken: 'ext_techcorp123456789',
              userLimit: 50,
              users: []
            }
          };
          
          let users = {};
          
          function generateSecureToken() {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
            let token = 'usr_';
            for (let i = 0; i < 24; i++) {
              token += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return token;
          }
          
          const server = http.createServer((req, res) => {
            const parsedUrl = url.parse(req.url, true);
            
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
            
            if (req.method === 'OPTIONS') {
              res.writeHead(200);
              res.end();
              return;
            }
            
            let body = '';
            req.on('data', chunk => body += chunk);
            req.on('end', () => {
              console.log(`${req.method} ${parsedUrl.pathname}`);
              
              try {
                if (parsedUrl.pathname === '/api/organizations' && req.method === 'POST') {
                  const data = JSON.parse(body);
                  const token = 'ext_' + Math.random().toString(36).substr(2, 16);
                  const org = {
                    id: 'org_' + Date.now(),
                    ...data,
                    accessToken: token,
                    users: []
                  };
                  organizations[token] = org;
                  
                  res.writeHead(200, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify(org));
                  
                } else if (parsedUrl.pathname === '/api/organizations' && req.method === 'GET') {
                  res.writeHead(200, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify(Object.values(organizations)));
                  
                } else if (parsedUrl.pathname.startsWith('/api/org/')) {
                  const token = parsedUrl.pathname.split('/')[3];
                  const org = organizations[token];
                  
                  if (org) {
                    res.writeHead(200, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify(org));
                  } else {
                    res.writeHead(404, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: 'Organization not found'}));
                  }
                  
                } else if (parsedUrl.pathname === '/api/users' && req.method === 'POST') {
                  const data = JSON.parse(body);
                  const extensionToken = generateSecureToken();
                  const user = {
                    id: 'user_' + Date.now(),
                    ...data,
                    extensionToken,
                    status: 'active',
                    createdAt: new Date().toISOString()
                  };
                  users[user.id] = user;
                  
                  if (organizations[data.orgToken]) {
                    organizations[data.orgToken].users.push(user);
                  }
                  
                  res.writeHead(200, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify(user));
                  
                } else if (parsedUrl.pathname.startsWith('/api/users/org/')) {
                  const orgToken = parsedUrl.pathname.split('/')[4];
                  const org = organizations[orgToken];
                  
                  if (org) {
                    res.writeHead(200, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify(org.users || []));
                  } else {
                    res.writeHead(404, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: 'Organization not found'}));
                  }
                  
                } else if (parsedUrl.pathname.startsWith('/api/users/') && parsedUrl.pathname.includes('/regenerate-token')) {
                  const userId = parsedUrl.pathname.split('/')[3];
                  const user = users[userId];
                  
                  if (user) {
                    user.extensionToken = generateSecureToken();
                    res.writeHead(200, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify(user));
                  } else {
                    res.writeHead(404, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: 'User not found'}));
                  }
                  
                } else if (parsedUrl.pathname.startsWith('/api/users/') && req.method === 'DELETE') {
                  const userId = parsedUrl.pathname.split('/')[3];
                  
                  if (users[userId]) {
                    delete users[userId];
                    res.writeHead(200, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({message: 'User deleted'}));
                  } else {
                    res.writeHead(404, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: 'User not found'}));
                  }
                  
                } else if (parsedUrl.pathname === '/health') {
                  res.writeHead(200, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify({status: 'ok', timestamp: new Date().toISOString()}));
                  
                } else {
                  res.writeHead(404, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify({error: 'Not found'}));
                }
              } catch (error) {
                console.error('Error:', error);
                res.writeHead(500, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({error: 'Internal server error'}));
              }
            });
          });
          
          server.listen(3000, '0.0.0.0', () => {
            console.log('Master API running on port 3000');
          });
          EOF
          
          node server.js
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: master-api-service
  namespace: enterprise-system
spec:
  selector:
    app: master-api
  ports:
  - name: api
    port: 8080
    targetPort: 3000
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: master-portal-config
  namespace: enterprise-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Master Portal</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #0f172a; color: white; }
            .container { max-width: 1000px; margin: 0 auto; }
            .header { background: linear-gradient(135deg, #7c3aed, #a855f7); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; text-align: center; }
            .card { background: #1e293b; padding: 2rem; border-radius: 12px; margin-bottom: 1rem; }
            .btn { background: #7c3aed; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 8px; cursor: pointer; }
            .form-group { margin-bottom: 1rem; }
            .form-group input { width: 100%; padding: 0.75rem; border: 1px solid #475569; border-radius: 8px; background: #334155; color: white; }
            .table { width: 100%; border-collapse: collapse; }
            .table th, .table td { padding: 1rem; text-align: left; border-bottom: 1px solid #334155; }
            .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); }
            .modal-content { background: #1e293b; padding: 2rem; border-radius: 12px; max-width: 500px; margin: 10% auto; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>👑 Master Portal</h1>
                <p>Enterprise Security System</p>
            </div>
            
            <div class="card">
                <h2>Organizations</h2>
                <button class="btn" onclick="showModal()">+ Create Organization</button>
                <table class="table" style="margin-top: 1rem;">
                    <thead>
                        <tr><th>Organization</th><th>Admin Email</th><th>Access Token</th><th>Users</th></tr>
                    </thead>
                    <tbody id="orgList">
                        <tr>
                            <td>TechCorp Inc</td>
                            <td>admin@techcorp.com</td>
                            <td><code>ext_techcorp123456789</code></td>
                            <td>0/50</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div id="modal" class="modal">
            <div class="modal-content">
                <h3>Create Organization</h3>
                <form id="createForm">
                    <div class="form-group">
                        <input type="text" id="name" placeholder="Organization Name" required>
                    </div>
                    <div class="form-group">
                        <input type="text" id="domain" placeholder="company.com" required>
                    </div>
                    <div class="form-group">
                        <input type="email" id="adminEmail" placeholder="admin@company.com" required>
                    </div>
                    <div class="form-group">
                        <input type="number" id="userLimit" value="50" required>
                    </div>
                    <button type="submit" class="btn">Create</button>
                    <button type="button" class="btn" onclick="closeModal()">Cancel</button>
                </form>
            </div>
        </div>

        <script>
            const API_BASE = window.location.origin.replace(/:\d+/, ':30320');
            
            function showModal() { document.getElementById('modal').style.display = 'block'; }
            function closeModal() { document.getElementById('modal').style.display = 'none'; }
            
            document.getElementById('createForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const data = {
                    name: document.getElementById('name').value,
                    domain: document.getElementById('domain').value,
                    adminEmail: document.getElementById('adminEmail').value,
                    userLimit: parseInt(document.getElementById('userLimit').value)
                };
                
                try {
                    const response = await fetch(`${API_BASE}/api/organizations`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    
                    const org = await response.json();
                    
                    const row = document.getElementById('orgList').insertRow();
                    row.innerHTML = `
                        <td>${org.name}</td>
                        <td>${org.adminEmail}</td>
                        <td><code>${org.accessToken}</code></td>
                        <td>0/${org.userLimit}</td>
                    `;
                    
                    alert(`Organization Created!

Name: ${org.name}
Access Token: ${org.accessToken}

Organization Admin should:
1. Go to Organization Portal (port 30197)
2. Enter token: ${org.accessToken}`);
                    
                    closeModal();
                    document.getElementById('createForm').reset();
                } catch (error) {
                    alert('Error creating organization');
                }
            });
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: org-portal-config
  namespace: enterprise-system
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Organization Portal</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #0f172a; color: white; }
            .login { min-height: 100vh; display: flex; align-items: center; justify-content: center; }
            .login-card { background: #1e293b; padding: 3rem; border-radius: 12px; max-width: 400px; }
            .dashboard { display: none; max-width: 1000px; margin: 0 auto; }
            .header { background: linear-gradient(135deg, #059669, #10b981); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; }
            .card { background: #1e293b; padding: 2rem; border-radius: 12px; margin-bottom: 1rem; }
            .btn { background: #059669; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 8px; cursor: pointer; width: 100%; }
            .form-group { margin-bottom: 1rem; }
            .form-group input { width: 100%; padding: 0.75rem; border: 1px solid #475569; border-radius: 8px; background: #334155; color: white; }
            .table { width: 100%; border-collapse: collapse; }
            .table th, .table td { padding: 1rem; text-align: left; border-bottom: 1px solid #334155; }
            .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); }
            .modal-content { background: #1e293b; padding: 2rem; border-radius: 12px; max-width: 500px; margin: 10% auto; }
        </style>
    </head>
    <body>
        <div id="loginScreen" class="login">
            <div class="login-card">
                <h1>🏢 Organization Portal</h1>
                <p>Enter access token from Master Admin</p>
                <form id="loginForm">
                    <div class="form-group">
                        <input type="text" id="token" placeholder="Access Token" required>
                    </div>
                    <button type="submit" class="btn">Login</button>
                </form>
                <p style="margin-top: 1rem; color: #64748b; font-size: 0.9rem;">Sample: ext_techcorp123456789</p>
            </div>
        </div>

        <div id="dashboard" class="dashboard">
            <div class="header">
                <h1 id="orgName">Organization Dashboard</h1>
                <p>Manage users and extension tokens</p>
            </div>
            
            <div class="card">
                <h2>User Management</h2>
                <button class="btn" onclick="showUserModal()">+ Create User</button>
                <table class="table" style="margin-top: 1rem;">
                    <thead>
                        <tr><th>User</th><th>Email</th><th>Extension Token</th><th>Actions</th></tr>
                    </thead>
                    <tbody id="userList"></tbody>
                </table>
            </div>
        </div>

        <div id="userModal" class="modal">
            <div class="modal-content">
                <h3>Create User</h3>
                <form id="userForm">
                    <div class="form-group">
                        <input type="text" id="userName" placeholder="User Name" required>
                    </div>
                    <div class="form-group">
                        <input type="email" id="userEmail" placeholder="user@company.com" required>
                    </div>
                    <button type="submit" class="btn">Create User</button>
                    <button type="button" class="btn" onclick="closeUserModal()">Cancel</button>
                </form>
            </div>
        </div>

        <script>
            const API_BASE = window.location.origin.replace(/:\d+/, ':30320');
            let currentOrg = null;
            let users = [];
            
            document.getElementById('loginForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const token = document.getElementById('token').value.trim();
                
                try {
                    const response = await fetch(`${API_BASE}/api/org/${token}`);
                    if (response.ok) {
                        currentOrg = await response.json();
                        showDashboard();
                        loadUsers();
                    } else {
                        alert('Invalid token. Try: ext_techcorp123456789');
                    }
                } catch (error) {
                    alert('Connection error');
                }
            });
            
            function showDashboard() {
                document.getElementById('loginScreen').style.display = 'none';
                document.getElementById('dashboard').style.display = 'block';
                document.getElementById('orgName').textContent = currentOrg.name;
            }
            
            function showUserModal() { document.getElementById('userModal').style.display = 'block'; }
            function closeUserModal() { document.getElementById('userModal').style.display = 'none'; }
            
            async function loadUsers() {
                try {
                    const response = await fetch(`${API_BASE}/api/users/org/${currentOrg.accessToken}`);
                    users = await response.json();
                    
                    const tbody = document.getElementById('userList');
                    tbody.innerHTML = '';
                    
                    users.forEach(user => {
                        const row = tbody.insertRow();
                        row.innerHTML = `
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td><code>${user.extensionToken}</code></td>
                            <td>
                                <button class="btn" onclick="regenerateToken('${user.id}')">Regenerate</button>
                                <button class="btn" onclick="deleteUser('${user.id}')">Delete</button>
                            </td>
                        `;
                    });
                } catch (error) {
                    console.error('Error loading users');
                }
            }
            
            document.getElementById('userForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const userData = {
                    name: document.getElementById('userName').value,
                    email: document.getElementById('userEmail').value,
                    orgToken: currentOrg.accessToken
                };
                
                try {
                    const response = await fetch(`${API_BASE}/api/users`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(userData)
                    });
                    
                    const user = await response.json();
                    
                    alert(`User Created!

Name: ${user.name}
Extension Token: ${user.extensionToken}

Give this token to user for browser extension`);
                    
                    closeUserModal();
                    document.getElementById('userForm').reset();
                    loadUsers();
                } catch (error) {
                    alert('Error creating user');
                }
            });
            
            async function regenerateToken(userId) {
                try {
                    const response = await fetch(`${API_BASE}/api/users/${userId}/regenerate-token`, {
                        method: 'POST'
                    });
                    
                    const user = await response.json();
                    alert(`New Token: ${user.extensionToken}`);
                    loadUsers();
                } catch (error) {
                    alert('Error regenerating token');
                }
            }
            
            async function deleteUser(userId) {
                if (confirm('Delete user?')) {
                    try {
                        await fetch(`${API_BASE}/api/users/${userId}`, {
                            method: 'DELETE'
                        });
                        
                        alert('User deleted');
                        loadUsers();
                    } catch (error) {
                        alert('Error deleting user');
                    }
                }
            }
        </script>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master-portal
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: master-portal
  template:
    metadata:
      labels:
        app: master-portal
    spec:
      containers:
      - name: master-portal
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: html-content
        configMap:
          name: master-portal-config
---
apiVersion: v1
kind: Service
metadata:
  name: master-portal-service
  namespace: enterprise-system
spec:
  selector:
    app: master-portal
  ports:
  - name: web
    port: 8090
    targetPort: 80
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: org-portal
  namespace: enterprise-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: org-portal
  template:
    metadata:
      labels:
        app: org-portal
    spec:
      containers:
      - name: org-portal
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: html-content
        configMap:
          name: org-portal-config
---
apiVersion: v1
kind: Service
metadata:
  name: org-portal-service
  namespace: enterprise-system
spec:
  selector:
    app: org-portal
  ports:
  - name: web
    port: 8091
    targetPort: 80
  type: NodePort